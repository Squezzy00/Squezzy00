const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WEBHOOK_PATH = '/tg-webhook';
const DOMAIN = process.env.RENDER_EXTERNAL_URL || process.env.DOMAIN;
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = `https://${DOMAIN.replace(/^https?:\/\//, '')}${WEBHOOK_PATH}`;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS reminders (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        chat_id BIGINT NOT NULL,
        message_id BIGINT,
        text TEXT NOT NULL,
        end_time BIGINT NOT NULL,
        unit TEXT NOT NULL
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', err);
  }
})();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–æ–≤ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π)
bot.hears(/^\/(\d+)([—Åc–ºm—áh–¥d])\s(.+)$/i, async (ctx) => {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const messageId = ctx.message.message_id;
  const [, amount, unit, text] = ctx.match;
  
  // –ú–∞–ø–ø–∏–Ω–≥ –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏
  const unitMap = {
    '—Å': '—Å', 'c': '—Å',
    '–º': '–º', 'm': '–º',
    '—á': '—á', 'h': '—á',
    '–¥': '–¥', 'd': '–¥'
  };
  
  const cleanUnit = unitMap[unit.toLowerCase()];
  if (!cleanUnit) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /5—Å, /10–º, /1—á, /2–¥');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è
  const numAmount = parseInt(amount);
  if (isNaN(numAmount) || numAmount <= 0) {
    return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä /5—Å)');
  }

  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  let ms;
  switch(cleanUnit) {
    case '—Å': ms = numAmount * 1000; break;
    case '–º': ms = numAmount * 60 * 1000; break;
    case '—á': ms = numAmount * 60 * 60 * 1000; break;
    case '–¥': ms = numAmount * 24 * 60 * 60 * 1000; break;
    default: return ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏');
  }

  const endTime = Date.now() + ms;

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ë–î
    await pool.query(
      `INSERT INTO reminders 
       (user_id, chat_id, message_id, text, end_time, unit) 
       VALUES ($1, $2, $3, $4, $5, $6)`,
      [userId, chatId, messageId, text, endTime, cleanUnit]
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    setTimeout(async () => {
      try {
        const userTag = ctx.from.username 
          ? `@${ctx.from.username}` 
          : `${ctx.from.first_name}`;
        
        await ctx.telegram.sendMessage(
          chatId, 
          `üîî ${userTag}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${text}`,
          { reply_to_message_id: messageId }
        );
        
        // –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await pool.query(
          'DELETE FROM reminders WHERE user_id = $1 AND chat_id = $2 AND message_id = $3',
          [userId, chatId, messageId]
        );
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', err);
      }
    }, ms);

    ctx.reply(`‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ${amount}${cleanUnit}: "${text}"`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', err);
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /timer (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
bot.command('timer', async (ctx) => {
  try {
    const res = await pool.query(
      `SELECT text, unit, 
       (end_time - $1) / 1000 AS seconds_left
       FROM reminders 
       WHERE user_id = $2 AND end_time > $1`,
      [Date.now(), ctx.from.id]
    );
    
    if (res.rows.length === 0) {
      return ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è≥');
    }
    
    const timerList = res.rows.map(row => {
      const timeLeft = Math.ceil(row.seconds_left);
      const units = { '—Å': '—Å–µ–∫', '–º': '–º–∏–Ω', '—á': '—á–∞—Å', '–¥': '–¥–Ω' };
      return `‚è± ${row.text} (–æ—Å—Ç–∞–ª–æ—Å—å: ${timeLeft}${units[row.unit] || '?'})`;
    }).join('\n');
    
    ctx.reply(`üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n${timerList}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /timer:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
  bot.handleUpdate(req.body, res);
});

app.get('/', (req, res) => {
  res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.deleteWebhook();
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:', err);
  }
});
