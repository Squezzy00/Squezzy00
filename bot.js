require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { DateTime } = require('luxon');
const timezone = 'Europe/Moscow'; // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è

const bot = new Telegraf(process.env.BOT_TOKEN);
let timerCounter = 1;
const activeKeyboards = new Map();
const activeTimers = new Map(); // –•—Ä–∞–Ω–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function escapeText(text) {
    return text ? text.toString() : '';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function parseDateTime(input, ctx) {
    try {
        const now = DateTime.now().setZone(timezone);
        let datetime;

        if (input.includes('.')) {
            // –§–æ—Ä–º–∞—Ç—ã: "DD.MM.YYYY HH:mm" –∏–ª–∏ "DD.MM HH:mm"
            const [datePart, timePart] = input.split(' ');
            const [day, month, year] = datePart.split('.');
            
            datetime = DateTime.fromObject({
                day: parseInt(day),
                month: parseInt(month),
                year: year ? parseInt(year) : now.year,
                hour: parseInt(timePart.split(':')[0]),
                minute: parseInt(timePart.split(':')[1]),
                zone: timezone
            });
        } else {
            // –§–æ—Ä–º–∞—Ç "HH:mm"
            const [hours, minutes] = input.split(':');
            datetime = DateTime.fromObject({
                hour: parseInt(hours),
                minute: parseInt(minutes),
                zone: timezone
            }).set({
                day: now.day,
                month: now.month,
                year: now.year
            });
            
            // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, —Å—Ç–∞–≤–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if (datetime < now) {
                datetime = datetime.plus({ days: 1 });
            }
        }
        
        if (!datetime.isValid) {
            ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n` +
                     `"DD.MM.YYYY HH:mm"\n"DD.MM HH:mm"\n"HH:mm"`);
            return null;
        }
        
        return datetime;
    } catch (e) {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n` +
                 `"DD.MM.YYYY HH:mm"\n"DD.MM HH:mm"\n"HH:mm"`);
        return null;
    }
}

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start((ctx) => {
    const username = ctx.message.from.username ? `@${ctx.message.from.username}` : ctx.message.from.first_name;
    ctx.reply(
        `üï∞Ô∏è –ü—Ä–∏–≤–µ—Ç, ${username}, –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞!\n\n` +
        `‚ú® –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n` +
        `‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤:\n` +
        `/timer 25.12.2023 20:00 –ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å –†–æ–∂–¥–µ—Å—Ç–≤–æ–º\n` +
        `/timer 15.08 12:00 –û–±–µ–¥\n` +
        `/timer 18:30 –ó–≤–æ–Ω–æ–∫ –º–∞–º–µ\n` +
        `/cancel 123 - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚Ññ123\n\n` +
        `‚è± –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n` +
        `/1—Å –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ - —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É\n` +
        `/5–º –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É - —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n` +
        `/2—á –ü—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n` +
        `/3–¥ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç - —á–µ—Ä–µ–∑ 3 –¥–Ω—è\n\n` +
        `üÜï –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `/see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2 - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n` +
        `/stop - —Å–∫—Ä—ã—Ç—å —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É`
    ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ start:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /see - —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
bot.command('see', (ctx) => {
    const userId = ctx.from.id;
    const args = ctx.message.text.split(' ').slice(1).join(' ').split(',');

    if (args.length === 0 || args[0].trim() === '') {
        return ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n' +
            '‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2, –ö–Ω–æ–ø–∫–∞3\n' +
            'üîπ –ü—Ä–∏–º–µ—Ä: /see –î–∞, –ù–µ—Ç, –í–æ–∑–º–æ–∂–Ω–æ'
        ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ see:', e));
    }

    const buttons = args.map(btn => btn.trim()).filter(btn => btn !== '');
    const keyboard = Markup.keyboard(buttons.map(btn => [btn]))
        .resize()
        .selective();

    activeKeyboards.set(userId, keyboard);

    ctx.reply('–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:', {
        reply_markup: keyboard.reply_markup,
        reply_to_message_id: ctx.message.message_id
    }).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /stop - —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
bot.command('stop', (ctx) => {
    const userId = ctx.from.id;

    if (activeKeyboards.has(userId)) {
        ctx.reply('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞', {
            reply_markup: { remove_keyboard: true },
            reply_to_message_id: ctx.message.message_id
        }).then(() => {
            activeKeyboards.delete(userId);
        }).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e));
    } else {
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /see', {
            reply_to_message_id: ctx.message.message_id
        }).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ stop:', e));
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /timer - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–æ –¥–∞—Ç–µ/–≤—Ä–µ–º–µ–Ω–∏
bot.command('timer', (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 2) {
        return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /timer –¥–∞—Ç–∞_–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n' +
                       '–ü—Ä–∏–º–µ—Ä—ã:\n' +
                       '/timer 25.12.2023 20:00 –ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å –†–æ–∂–¥–µ—Å—Ç–≤–æ–º\n' +
                       '/timer 15.08 12:00 –û–±–µ–¥\n' +
                       '/timer 18:30 –ó–≤–æ–Ω–æ–∫ –º–∞–º–µ');
    }

    const datetimeStr = args[0] + ' ' + args[1];
    const text = args.slice(2).join(' ');
    const datetime = parseDateTime(datetimeStr, ctx);
    
    if (!datetime) return;

    const now = DateTime.now().setZone(timezone);
    const diff = datetime.diff(now).as('milliseconds');

    if (diff <= 0) {
        return ctx.reply('‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!');
    }

    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const username = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
    const timerId = timerCounter++;

    const timer = setTimeout(async () => {
        try {
            await ctx.telegram.sendMessage(
                chatId,
                `üîî ${username}, –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n` +
                `üìå ${text}\n` +
                `‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${datetime.setZone(timezone).toFormat('dd.MM.yyyy HH:mm')}`
            );
            activeTimers.delete(timerId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        }
    }, diff);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
    activeTimers.set(timerId, {
        timer,
        userId,
        chatId,
        text,
        datetime: datetime.toISO()
    });

    ctx.reply(
        `‚è≥ ${username}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n` +
        `üìå –¢–µ–∫—Å—Ç: ${text}\n` +
        `‚è±Ô∏è –°—Ä–∞–±–æ—Ç–∞–µ—Ç: ${datetime.setZone(timezone).toFormat('dd.MM.yyyy HH:mm')}\n` +
        `üÜî ID —Ç–∞–π–º–µ—Ä–∞: ${timerId}\n\n` +
        `–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cancel ${timerId}`
    ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞
bot.command('cancel', (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length === 0) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã\n' +
                        '–ü—Ä–∏–º–µ—Ä: /cancel 123');
    }

    const timerId = parseInt(args[0]);
    if (isNaN(timerId)) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∞–π–º–µ—Ä–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ');
    }

    if (activeTimers.has(timerId)) {
        const timerData = activeTimers.get(timerId);
        if (timerData.userId !== ctx.from.id) {
            return ctx.reply('‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–∞–π–º–µ—Ä—ã');
        }

        clearTimeout(timerData.timer);
        activeTimers.delete(timerId);
        ctx.reply(`‚úÖ –¢–∞–π–º–µ—Ä ‚Ññ${timerId} –æ—Ç–º–µ–Ω–µ–Ω:\n"${timerData.text}"`)
           .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∞–π–º–µ—Ä–∞:', e));
    } else {
        ctx.reply('‚ùå –¢–∞–π–º–µ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
           .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∞–π–º–µ—Ä–∞:', e));
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (N—Å, N–º, N—á, N–¥)
bot.hears(/^\/(\d+)(—Å|–º|—á|–¥)\s+(.+)$/, async (ctx) => {
    const amount = parseInt(ctx.match[1]);
    const unit = ctx.match[2];
    const text = ctx.match[3];
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const username = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
    const timerId = timerCounter++;

    let milliseconds = 0;
    switch (unit) {
        case '—Å': milliseconds = amount * 1000; break;
        case '–º': milliseconds = amount * 60 * 1000; break;
        case '—á': milliseconds = amount * 60 * 60 * 1000; break;
        case '–¥': milliseconds = amount * 24 * 60 * 60 * 1000; break;
    }

    if (milliseconds > 0) {
        const now = DateTime.now().setZone(timezone);
        const triggerTime = now.plus({ milliseconds });

        const timer = setTimeout(async () => {
            try {
                await ctx.telegram.sendMessage(
                    chatId,
                    `üîî ${username}, –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n` +
                    `üìå ${text}\n` +
                    `‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${now.toFormat('dd.MM.yyyy HH:mm')}`
                );
                activeTimers.delete(timerId);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
            }
        }, milliseconds);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
        activeTimers.set(timerId, {
            timer,
            userId,
            chatId,
            text,
            datetime: triggerTime.toISO()
        });

        ctx.reply(
            `‚è≥ ${username}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n` +
            `üìå –¢–µ–∫—Å—Ç: ${text}\n` +
            `‚è±Ô∏è –°—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑: ${amount} ${unit}\n` +
            `üïí –í—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: ${triggerTime.toFormat('dd.MM.yyyy HH:mm')}\n` +
            `üÜî ID —Ç–∞–π–º–µ—Ä–∞: ${timerId}\n\n` +
            `–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cancel ${timerId}`
        ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞:', e));
    } else {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /1—Å, /5–º, /2—á –∏–ª–∏ /3–¥')
           .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', e));
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('text', (ctx) => {
    const text = ctx.message.text;
    const userId = ctx.from.id;

    if (text.startsWith('/')) return;

    if (activeKeyboards.has(userId)) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞–∂–∞–ª: ${text}`);
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const PORT = process.env.PORT || 3000;
bot.launch({
    webhook: process.env.RENDER ? {
        domain: process.env.WEBHOOK_URL,
        port: PORT
    } : undefined
}).then(() => console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
