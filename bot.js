const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const OWNER_ID = 5005387093; // ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
const WEBHOOK_PATH = '/tg-webhook';
const DOMAIN = process.env.RENDER_EXTERNAL_URL || 'your-render-service.onrender.com';
const WEBHOOK_URL = `https://${DOMAIN.replace(/^https?:\/\//, '')}${WEBHOOK_PATH}`;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        nickname TEXT,
        universal_id SERIAL,
        is_premium BOOLEAN DEFAULT FALSE,
        is_banned BOOLEAN DEFAULT FALSE,
        is_admin BOOLEAN DEFAULT FALSE,
        banner_file_id TEXT
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_keyboards (
        user_id BIGINT PRIMARY KEY,
        buttons TEXT[] NOT NULL DEFAULT '{}'
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS chat_keyboards (
        chat_id BIGINT PRIMARY KEY,
        buttons TEXT[] NOT NULL DEFAULT '{}'
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS reminders (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        username TEXT,
        text TEXT NOT NULL,
        end_time BIGINT NOT NULL,
        unit TEXT NOT NULL
      )
    `);
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É
    await pool.query(`
      INSERT INTO users (user_id, is_admin) 
      VALUES ($1, TRUE) 
      ON CONFLICT (user_id) DO UPDATE SET is_admin = TRUE`,
      [OWNER_ID]
    );
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –≥–æ—Ç–æ–≤—ã');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', err);
    process.exit(1);
  }
})();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const activeKeyboards = new Map();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞
bot.use(async (ctx, next) => {
  if (ctx.from) {
    const user = await pool.query('SELECT is_banned FROM users WHERE user_id = $1', [ctx.from.id]);
    if (user.rows.length > 0 && user.rows[0].is_banned) {
      return ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ');
    }
  }
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /setnick (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞)
bot.command('setnick', async (ctx) => {
  const nickname = ctx.message.text.split(' ').slice(1).join(' ');
  
  if (!nickname) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setnick –í–∞—à–ù–∏–∫–Ω–µ–π–º');
  }

  try {
    await pool.query('UPDATE users SET nickname = $1 WHERE user_id = $2', [nickname, ctx.from.id]);
    ctx.reply(`‚úÖ –í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${nickname}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /setnick:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞
bot.on('message', async (ctx) => {
  if (ctx.message.reply_to_message && ctx.message.reply_to_message.text === '/setbanner') {
    if (ctx.message.photo) {
      const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      
      try {
        await pool.query('UPDATE users SET banner_file_id = $1 WHERE user_id = $2', [fileId, ctx.from.id]);
        ctx.reply('‚úÖ –ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞:', err);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞');
      }
    } else {
      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /setbanner');
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /setbanner
bot.command('setbanner', async (ctx) => {
  ctx.reply('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë –∫–∞–∫ –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è');
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    await pool.query(`
      INSERT INTO users (user_id, username) 
      VALUES ($1, $2) 
      ON CONFLICT (user_id) DO UPDATE SET username = $2`,
      [ctx.from.id, ctx.from.username]
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = await pool.query(`
      SELECT universal_id, is_premium, is_admin, nickname 
      FROM users 
      WHERE user_id = $1`, 
      [ctx.from.id]
    );
    
    let status = '';
    if (ctx.from.id === OWNER_ID) {
      status = 'üëë –í–ª–∞–¥–µ–ª–µ—Ü';
    } else if (userData.rows[0].is_admin) {
      status = 'üõ° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    }
    
    status += userData.rows[0].is_premium ? ' üíé –ü—Ä–µ–º–∏—É–º' : '';
    
    const nickname = userData.rows[0].nickname || ctx.from.username || ctx.from.first_name;
    
    ctx.replyWithHTML(`
üëã <b>–ü—Ä–∏–≤–µ—Ç, ${nickname}!</b>

üìå –í–∞—à ID –≤ –±–æ—Ç–µ: <code>${userData.rows[0].universal_id}</code>
${status ? `üåü –°—Ç–∞—Ç—É—Å: ${status}` : ''}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/help</code> –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00
    `);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /start:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
  ctx.replyWithHTML(`
<b>üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>
/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/profile ID - –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ø—Ä–µ–º–∏—É–º+)
/setbanner - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É)
/setnick –ù–∏–∫–Ω–µ–π–º - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º
/timer - –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

<b>–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:</b>
/set –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/see –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
/open - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/stop - —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

<b>–ü—Ä–µ–º–∏—É–º:</b>
/tagall N —Ç–µ–∫—Å—Ç - —Ç–µ–≥–Ω—É—Ç—å –≤—Å–µ—Ö (–ø—Ä–µ–º–∏—É–º+)

<b>–ê–¥–º–∏–Ω:</b>
/ban ID - –∑–∞–±–∞–Ω–∏—Ç—å
/premium ID - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º

<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b>
/makeadmin ID - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00
  `);
});

// –ö–æ–º–∞–Ω–¥–∞ /profile
bot.command('profile', async (ctx) => {
  try {
    let targetId = ctx.from.id;
    const args = ctx.message.text.split(' ');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    if (args.length > 1) {
      const user = await pool.query('SELECT is_premium, is_admin FROM users WHERE user_id = $1', [ctx.from.id]);
      const isPrivileged = user.rows.length > 0 && (user.rows[0].is_premium || user.rows[0].is_admin || ctx.from.id === OWNER_ID);
      
      if (!isPrivileged) {
        return ctx.reply('üö´ –ü—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –≤—ã—à–µ');
      }
      
      targetId = await getUserIdByUniversalId(parseInt(args[1]));
      if (!targetId) return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const user = await pool.query(`
      SELECT universal_id, is_premium, is_admin, nickname, username, banner_file_id 
      FROM users 
      WHERE user_id = $1`, 
      [targetId]
    );
    
    if (user.rows.length === 0) return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    const keyboard = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [targetId]);
    
    const nickname = user.rows[0].nickname || user.rows[0].username || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    const nicknameText = user.rows[0].nickname ? 
      `<a href="tg://user?id=${targetId}">${user.rows[0].nickname}</a>` : 
      nickname;
    
    let status = '–ò–≥—Ä–æ–∫';
    if (targetId === OWNER_ID) {
      status = '–í–ª–∞–¥–µ–ª–µ—Ü';
    } else if (user.rows[0].is_admin) {
      status = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    }
    
    const premiumStatus = user.rows[0].is_premium ? '–ü—Ä–µ–º–∏—É–º' : '–ù–µ—Ç';
    const buttonsStatus = keyboard.rows.length > 0 ? 
      keyboard.rows[0].buttons.join(', ') : 
      '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã';
    
    const profileText = `
<b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b>
<i>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</i>

<b>‚îÇ –ù–∏–∫:</b> <i>${nicknameText}</i>
<b>‚îÇ ID:</b> <i>${user.rows[0].universal_id}</i>
<b>‚îÇ –°—Ç–∞—Ç—É—Å:</b> <i>${status}</i>
<b>‚îÇ –í–∏–ø:</b> <i>${premiumStatus}</i>
<b>‚îÇ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:</b> <i>${buttonsStatus}</i>
    `;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–Ω–Ω–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    if (user.rows[0].banner_file_id) {
      await ctx.replyWithPhoto(user.rows[0].banner_file_id, {
        caption: profileText,
        parse_mode: 'HTML'
      });
    } else {
      await ctx.replyWithHTML(profileText);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /profile:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /set (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
bot.command('set', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  
  if (buttons.length === 0 || buttons[0] === '') {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2');
  }

  try {
    await pool.query(
      `INSERT INTO user_keyboards (user_id, buttons) VALUES ($1, $2)
       ON CONFLICT (user_id) DO UPDATE SET buttons = $2`,
      [ctx.from.id, buttons]
    );
    
    await ctx.replyWithMarkdown(
      `‚úÖ *–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /open\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
      Markup.keyboard(buttons)
        .resize()
        .persistent()
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /set:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /see (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
bot.command('see', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  
  if (buttons.length === 0 || buttons[0] === '') {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2');
  }

  activeKeyboards.set(ctx.from.id, buttons);
  
  await ctx.replyWithMarkdown(
    `‚åõ *–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
    Markup.keyboard(buttons)
      .resize()
      .oneTime()
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /open (–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
bot.command('open', async (ctx) => {
  try {
    let buttons = [];
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if (activeKeyboards.has(ctx.from.id)) {
      buttons = activeKeyboards.get(ctx.from.id);
      return ctx.replyWithMarkdown(
        `‚åõ *–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
        Markup.keyboard(buttons).resize().oneTime()
      );
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const userKb = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [ctx.from.id]);
    if (userKb.rows.length > 0) {
      buttons = userKb.rows[0].buttons;
      return ctx.replyWithMarkdown(
        `‚úÖ *–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
        Markup.keyboard(buttons).resize().persistent()
      );
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Ç–∞
    if (ctx.chat.type !== 'private') {
      const chatKb = await pool.query('SELECT buttons FROM chat_keyboards WHERE chat_id = $1', [ctx.chat.id]);
      if (chatKb.rows.length > 0) {
        buttons = chatKb.rows[0].buttons;
        return ctx.replyWithMarkdown(
          `üë• *–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —á–∞—Ç–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
          Markup.keyboard(buttons).resize().persistent()
        );
      }
    }

    ctx.reply('‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /open:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /stop (—É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
bot.command('stop', async (ctx) => {
  activeKeyboards.delete(ctx.from.id);
  await ctx.reply('üóë –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', Markup.removeKeyboard());
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/ban, /premium, /makeadmin, /tagall, /timer) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

// –í–µ–±—Ö—É–∫
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
  bot.handleUpdate(req.body, res).catch(err => {
    console.error('Webhook error:', err);
    res.status(200).end();
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Telegram Bot Status</title>
      <meta charset="UTF-8">
      <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        h1 { color: #0088cc; }
        .status { font-size: 1.2em; margin: 20px 0; }
      </style>
    </head>
    <body>
      <h1>ü§ñ Telegram Bot</h1>
      <div class="status">–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</div>
      <div>Webhook: <code>${WEBHOOK_URL}</code></div>
    </body>
    </html>
  `);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 10000;
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.deleteWebhook();
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:', err);
    process.exit(1);
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function isAdmin(ctx) {
  try {
    const user = await pool.query('SELECT is_admin FROM users WHERE user_id = $1', [ctx.from.id]);
    return user.rows.length > 0 && user.rows[0].is_admin;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞:', err);
    return false;
  }
}

async function getUserIdByUniversalId(universalId) {
  try {
    const res = await pool.query('SELECT user_id FROM users WHERE universal_id = $1', [universalId]);
    return res.rows.length > 0 ? res.rows[0].user_id : null;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    return null;
  }
  }
