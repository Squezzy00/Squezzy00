const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
const WEBHOOK_PATH = '/tg-webhook';
const DOMAIN = process.env.RENDER_EXTERNAL_URL || 'your-render-service.onrender.com';
const WEBHOOK_URL = `https://${DOMAIN.replace(/^https?:\/\//, '')}${WEBHOOK_PATH}`;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
(async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS user_keyboards (
      user_id BIGINT PRIMARY KEY,
      buttons TEXT[] NOT NULL DEFAULT '{}'
    )
  `);
  await pool.query(`
    CREATE TABLE IF NOT EXISTS chat_keyboards (
      chat_id BIGINT PRIMARY KEY,
      buttons TEXT[] NOT NULL DEFAULT '{}'
    )
  `);
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –≥–æ—Ç–æ–≤—ã');
})();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const tempKeyboards = new Map();

// –ö–æ–º–∞–Ω–¥–∞ /set
bot.command('set', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  
  if (buttons.length === 0 || buttons[0] === '') {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2');
  }

  try {
    await pool.query(
      `INSERT INTO user_keyboards (user_id, buttons) VALUES ($1, $2)
       ON CONFLICT (user_id) DO UPDATE SET buttons = $2`,
      [ctx.from.id, buttons]
    );
    ctx.replyWithMarkdown(
      `‚úÖ *–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /open\n\n` +
      `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
      Markup.keyboard(buttons).resize().persistent()
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /set:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /see
bot.command('see', (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  
  if (buttons.length === 0 || buttons[0] === '') {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2');
  }

  tempKeyboards.set(ctx.from.id, buttons);
  ctx.replyWithMarkdown(
    `‚åõ *–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop\n\n` +
    `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
    Markup.keyboard(buttons).resize().persistent()
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.command('stop', (ctx) => {
  tempKeyboards.delete(ctx.from.id);
  ctx.reply('üóë –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–¥–∞–ª–µ–Ω—ã', Markup.removeKeyboard());
});

// –ö–æ–º–∞–Ω–¥–∞ /cfg (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('cfg', async (ctx) => {
  if (ctx.chat.type === 'private') return ctx.reply('–¢–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤!');
  
  try {
    const admins = await ctx.getChatAdministrators();
    const isAdmin = admins.some(a => a.user.id === ctx.from.id);
    if (!isAdmin) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!');

    const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
    if (buttons.length === 0) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cfg –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2');

    await pool.query(
      `INSERT INTO chat_keyboards (chat_id, buttons) VALUES ($1, $2)
       ON CONFLICT (chat_id) DO UPDATE SET buttons = $2`,
      [ctx.chat.id, buttons]
    );
    ctx.reply('‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /cfg:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /open
bot.command('open', async (ctx) => {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if (tempKeyboards.has(ctx.from.id)) {
      const buttons = tempKeyboards.get(ctx.from.id);
      return ctx.replyWithMarkdown(
        `‚åõ *–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
        Markup.keyboard(buttons).resize().persistent()
      );
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const userKb = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [ctx.from.id]);
    if (userKb.rows.length > 0) {
      return ctx.replyWithMarkdown(
        `‚úÖ *–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
        Markup.keyboard(userKb.rows[0].buttons).resize().persistent()
      );
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Ç–∞
    if (ctx.chat.type !== 'private') {
      const chatKb = await pool.query('SELECT buttons FROM chat_keyboards WHERE chat_id = $1', [ctx.chat.id]);
      if (chatKb.rows.length > 0) {
        return ctx.replyWithMarkdown(
          `üë• *–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —á–∞—Ç–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
          Markup.keyboard(chatKb.rows[0].buttons).resize().persistent()
        );
      }
    }

    ctx.reply('‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /open:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
bot.on('text', async (ctx) => {
  if (ctx.message.reply_to_message?.text?.includes('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00')) {
    await ctx.reply(
      `–í—ã –Ω–∞–∂–∞–ª–∏: "${ctx.message.text}"`,
      { reply_to_message_id: ctx.message.reply_to_message.message_id }
    );
  }
});

// –í–µ–±—Ö—É–∫
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
  bot.handleUpdate(req.body, res).catch(err => {
    console.error('Webhook error:', err);
    res.status(200).end();
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 10000;
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.deleteWebhook();
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:', err);
    process.exit(1);
  }
});
