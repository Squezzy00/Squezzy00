const { Telegraf } = require('telegraf');
const express = require('express');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const reminders = new Map();

// 1. –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const DOMAIN = 'squezzy00.onrender.com'; // –ñ—ë—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–º–µ–Ω
const WEBHOOK_PATH = '/tg-webhook';
const WEBHOOK_URL = `https://${DOMAIN}${WEBHOOK_PATH}`;

// 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
  next();
});

// 3. –†–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  res.send(`
    <h1>Telegram Reminder Bot</h1>
    <p>Status: <span style="color: green;">Active</span></p>
    <p>Webhook: <code>${WEBHOOK_PATH}</code></p>
    <p>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: <span id="error"></span></p>
    <script>
      fetch('/status').then(r => r.json()).then(data => {
        document.getElementById('error').textContent = data.lastError || '–Ω–µ—Ç';
      });
    </script>
  `);
});

// 4. –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/status', (req, res) => {
  res.json({
    lastError: process.env.LAST_ERROR,
    webhookUrl: WEBHOOK_URL
  });
});

// 5. –ö–æ–º–∞–Ω–¥–∞ /–≤—Ä–µ–º—è (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)
bot.command('–≤—Ä–µ–º—è', (ctx) => {
  try {
    const [_, timeStr, ...messageParts] = ctx.message.text.split(' ');
    const message = messageParts.join(' ').trim();
    
    if (!message) throw new Error('–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω');
    
    const timeMatch = timeStr.match(/^(\d+)([—Å–º—á–¥])$/);
    if (!timeMatch) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
    
    const [, amount, unit] = timeMatch;
    const units = { '—Å': 1000, '–º': 60000, '—á': 3600000, '–¥': 86400000 };
    const ms = amount * (units[unit] || 1000);

    // –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if (reminders.has(ctx.from.id)) {
      clearTimeout(reminders.get(ctx.from.id));
    }

    // –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    const timer = setTimeout(() => {
      ctx.reply(`@${ctx.from.username}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${message}`)
        .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err));
      reminders.delete(ctx.from.id);
    }, ms);

    reminders.set(ctx.from.id, timer);
    ctx.reply(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${timeStr}: "${message}"`);
  } catch (err) {
    ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}\n–ü—Ä–∏–º–µ—Ä: /5—Å –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ`);
  }
});

// 6. –í–µ–±—Ö—É–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
app.post(WEBHOOK_PATH, (req, res) => {
  bot.webhookCallback(WEBHOOK_PATH)(req, res)
    .then(() => res.status(200).end())
    .catch(err => {
      console.error('Webhook error:', err);
      process.env.LAST_ERROR = err.message;
      res.status(200).end(); // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–ª—è Telegram
    });
});

// 7. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  try {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞
    await bot.telegram.deleteWebhook({ drop_pending_updates: true });
    await bot.telegram.setWebhook(WEBHOOK_URL, {
      allowed_updates: ['message'],
      drop_pending_updates: true
    });
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏
    const me = await bot.telegram.getMe();
    console.log(`ü§ñ –ë–æ—Ç @${me.username} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`);
  } catch (err) {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err.message);
    process.env.LAST_ERROR = err.message;
  }
});
