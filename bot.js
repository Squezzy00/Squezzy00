const { Telegraf } = require('telegraf');
const express = require('express');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const activeTimers = new Map();

// 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WEBHOOK_PATH = '/tg-webhook';
const DOMAIN = 'squezzy00.onrender.com';
const WEBHOOK_URL = `https://${DOMAIN}${WEBHOOK_PATH}`;

// 2. Middleware
app.use(express.json());

// 3. –†–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  res.send(`
    <h1>–ë–æ—Ç —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</h1>
    <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: ${activeTimers.size}</p>
    <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /5—Å –ù–∞–ø–æ–º–Ω–∏—Ç—å</p>
  `);
});

// 4. –ö–æ–º–∞–Ω–¥–∞ /–≤—Ä–µ–º—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
bot.command('–≤—Ä–µ–º—è', (ctx) => {
  try {
    const text = ctx.message.text;
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã:', text);
    
    // –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –∏ –∞–Ω–≥–ª–∏–π—Å–∫—É—é "—Å")
    const match = text.match(/^\/–≤—Ä–µ–º—è\s+(\d+)([—Åc–º—á–¥])\s+(.+)/) || 
                 text.match(/^\/(\d+)([—Åc–º—á–¥])\s+(.+)/);
    
    if (!match) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /5—Å –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ');

    const [, amount, unit, message] = match;
    const userKey = ctx.from.id;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    const units = { 
      '—Å': 1000, 'c': 1000, 
      '–º': 60000, 
      '—á': 3600000, 
      '–¥': 86400000 
    };
    const delay = amount * (units[unit] || 1000);

    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (activeTimers.has(userKey)) {
      clearTimeout(activeTimers.get(userKey));
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    const timer = setTimeout(async () => {
      try {
        await ctx.reply(`@${ctx.from.username}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${message}`);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err);
      } finally {
        activeTimers.delete(userKey);
      }
    }, delay);

    activeTimers.set(userKey, timer);
    ctx.reply(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${amount}${unit}: "${message}"`);

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    ctx.reply(`‚ùå ${err.message}\n–ü—Ä–∏–º–µ—Ä: /5—Å –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ`);
  }
});

// 5. –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
  ctx.reply(`‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /5—Å –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–≤–æ–Ω–∏—Ç—å`);
});

// 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
app.post(WEBHOOK_PATH, (req, res) => {
  if (!req.body) {
    console.error('–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞');
    return res.status(400).end();
  }

  bot.handleUpdate(req.body)
    .then(() => res.status(200).end())
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞:', err);
      res.status(200).end();
    });
});

// 7. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 10000;
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  try {
    await bot.telegram.deleteWebhook();
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
  }
});
