require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');

const bot = new Telegraf(process.env.BOT_TOKEN);
let timerCounter = 1;
const activeKeyboards = new Map();
const activeTimers = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
function escapeMarkdown(text) {
    if (!text) return '';
    return text.toString()
        .replace(/\_/g, '\\_')
        .replace(/\*/g, '\\*')
        .replace(/\[/g, '\\[')
        .replace(/\]/g, '\\]')
        .replace(/\(/g, '\\(')
        .replace(/\)/g, '\\)')
        .replace(/\~/g, '\\~')
        .replace(/\`/g, '\\`')
        .replace(/\>/g, '\\>')
        .replace(/\#/g, '\\#')
        .replace(/\+/g, '\\+')
        .replace(/\-/g, '\\-')
        .replace(/\=/g, '\\=')
        .replace(/\|/g, '\\|')
        .replace(/\{/g, '\\{')
        .replace(/\}/g, '\\}')
        .replace(/\./g, '\\.')
        .replace(/\!/g, '\\!');
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function parseDateTime(input) {
    // –§–æ—Ä–º–∞—Ç "DD.MM.YYYY HH:mm"
    if (/^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}$/.test(input)) {
        const [datePart, timePart] = input.split(' ');
        const [day, month, year] = datePart.split('.').map(Number);
        const [hours, minutes] = timePart.split(':').map(Number);
        
        return new Date(year, month - 1, day, hours, minutes);
    }
    // –§–æ—Ä–º–∞—Ç "DD.MM HH:mm"
    else if (/^\d{2}\.\d{2} \d{2}:\d{2}$/.test(input)) {
        const [datePart, timePart] = input.split(' ');
        const [day, month] = datePart.split('.').map(Number);
        const year = new Date().getFullYear();
        const [hours, minutes] = timePart.split(':').map(Number);
        
        return new Date(year, month - 1, day, hours, minutes);
    }
    // –§–æ—Ä–º–∞—Ç "HH:mm"
    else if (/^\d{2}:\d{2}$/.test(input)) {
        const [hours, minutes] = input.split(':').map(Number);
        const now = new Date();
        const date = new Date(
            now.getFullYear(),
            now.getMonth(),
            now.getDate(),
            hours,
            minutes
        );
        
        return date <= now ? new Date(date.setDate(date.getDate() + 1)) : date;
    }
    
    return null;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
function formatDate(date) {
    const pad = num => num.toString().padStart(2, '0');
    return `${pad(date.getDate())}.${pad(date.getMonth() + 1)}.${date.getFullYear()} ${pad(date.getHours())}:${pad(date.getMinutes())}`;
}

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start((ctx) => {
    const username = ctx.from.username ? `@${ctx.from.username}` : escapeMarkdown(ctx.from.first_name);
    ctx.replyWithMarkdownV2(
        `üï∞Ô∏è *–ü—Ä–∏–≤–µ—Ç, ${username}, –Ø –±–æ—Ç\\-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞\\!*\n\n` +
        `‚ú® *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n\n` +
        `‚è∞ *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤:*\n` +
        `\`/timer 25\\.12\\.2023 20:00 –ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å –†–æ–∂–¥–µ—Å—Ç–≤–æ–º\`\n` +
        `\`/timer 15\\.08 12:00 –û–±–µ–¥\`\n` +
        `\`/timer 18:00 –£–∂–∏–Ω\`\n\n` +
        `‚è± *–ë—ã—Å—Ç—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n` +
        `\`/5—Å –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ\`\n` +
        `\`/10–º –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É\`\n` +
        `\`/2—á –ü—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ\`\n` +
        `\`/3–¥ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç\`\n\n` +
        `üõ† *–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
        `\`/see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2\`\n` +
        `\`/stop\`\n` +
        `\`/cancel ID_—Ç–∞–π–º–µ—Ä–∞\``,
        { parse_mode: 'MarkdownV2' }
    ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ start:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /timer
bot.command('timer', (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 2) {
        return ctx.replyWithMarkdownV2(
            '‚ùå *–§–æ—Ä–º–∞—Ç:* `\\/timer –¥–∞—Ç–∞_–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ`\n\n' +
            '*–ü—Ä–∏–º–µ—Ä—ã:*\n' +
            '`/timer 04\\.05\\.2025 22:00 –ü—Ä–∏–≤–µ—Ç`\n' +
            '`/timer 10\\.05 15:30 –û–±–µ–¥`\n' +
            '`/timer 18:00 –£–∂–∏–Ω`',
            { parse_mode: 'MarkdownV2' }
        ).catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    const datetimeStr = args[0] + (args[1].includes(':') ? '' : ' ' + args[1]);
    const text = args.slice(args[1].includes(':') ? 2 : 3).join(' ');
    const datetime = parseDateTime(datetimeStr);
    
    if (!datetime || isNaN(datetime.getTime())) {
        return ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
            '"DD.MM.YYYY HH:mm"\n' +
            '"DD.MM HH:mm"\n' +
            '"HH:mm"'
        ).catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    const now = new Date();
    if (datetime <= now) {
        return ctx.reply('‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!').catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    const timerId = timerCounter++;
    const timeout = datetime.getTime() - now.getTime();
    const username = ctx.from.username ? `@${ctx.from.username}` : escapeMarkdown(ctx.from.first_name);

    const timer = setTimeout(async () => {
        try {
            await ctx.replyWithMarkdownV2(
                `üîî *${username}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId}\\!*\n\n` +
                `üìå *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* ${escapeMarkdown(text)}\n` +
                `üéâ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ\\!`,
                { parse_mode: 'MarkdownV2' }
            );
            activeTimers.delete(timerId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        }
    }, timeout);

    activeTimers.set(timerId, { timer, userId: ctx.from.id, text, datetime });
    ctx.replyWithMarkdownV2(
        `‚è≥ *${username}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\\!*\n\n` +
        `üîπ *–¢–µ–∫—Å—Ç:* ${escapeMarkdown(text)}\n` +
        `‚è± *–°—Ä–∞–±–æ—Ç–∞–µ—Ç:* ${formatDate(datetime)}\n` +
        `üÜî *ID —Ç–∞–π–º–µ—Ä–∞:* ${timerId}\n\n` +
        `–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \\\`/cancel ${timerId}\\\``,
        { parse_mode: 'MarkdownV2' }
    ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞:', e));
});

// –ë—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã (5—Å, 10–º –∏ —Ç.–¥.)
bot.hears(/^\/(\d+)(—Å|–º|—á|–¥)\s+(.+)$/, async (ctx) => {
    const amount = parseInt(ctx.match[1]);
    const unit = ctx.match[2];
    const text = ctx.match[3];
    const timerId = timerCounter++;
    const username = ctx.from.username ? `@${ctx.from.username}` : escapeMarkdown(ctx.from.first_name);

    let milliseconds = 0;
    switch (unit) {
        case '—Å': milliseconds = amount * 1000; break;
        case '–º': milliseconds = amount * 60 * 1000; break;
        case '—á': milliseconds = amount * 60 * 60 * 1000; break;
        case '–¥': milliseconds = amount * 24 * 60 * 60 * 1000; break;
    }

    const datetime = new Date(Date.now() + milliseconds);
    const timer = setTimeout(async () => {
        try {
            await ctx.replyWithMarkdownV2(
                `üîî *${username}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId}\\!*\n\n` +
                `üìå *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* ${escapeMarkdown(text)}\n` +
                `üéâ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ\\!`,
                { parse_mode: 'MarkdownV2' }
            );
            activeTimers.delete(timerId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        }
    }, milliseconds);

    activeTimers.set(timerId, { timer, userId: ctx.from.id, text, datetime });
    ctx.replyWithMarkdownV2(
        `‚è≥ *${username}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\\!*\n\n` +
        `üîπ *–¢–µ–∫—Å—Ç:* ${escapeMarkdown(text)}\n` +
        `‚è± *–ß–µ—Ä–µ–∑:* ${amount}${unit}\n` +
        `üÜî *ID —Ç–∞–π–º–µ—Ä–∞:* ${timerId}\n\n` +
        `–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \\\`/cancel ${timerId}\\\``,
        { parse_mode: 'MarkdownV2' }
    ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /cancel
bot.command('cancel', (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    if (!args.length) {
        return ctx.replyWithMarkdownV2(
            '‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–π–º–µ—Ä–∞\n–ü—Ä–∏–º–µ—Ä: `/cancel 123`',
            { parse_mode: 'MarkdownV2' }
        ).catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    const timerId = parseInt(args[0]);
    if (!activeTimers.has(timerId)) {
        return ctx.reply('‚ùå –¢–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω').catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    const timer = activeTimers.get(timerId);
    if (timer.userId !== ctx.from.id) {
        return ctx.reply('‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–∞–π–º–µ—Ä—ã').catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    clearTimeout(timer.timer);
    activeTimers.delete(timerId);
    ctx.replyWithMarkdownV2(
        `‚úÖ *–¢–∞–π–º–µ—Ä ‚Ññ${timerId} –æ—Ç–º–µ–Ω—ë–Ω\\!*\n\n` +
        `üìå *–¢–µ–∫—Å—Ç:* ${escapeMarkdown(timer.text)}`,
        { parse_mode: 'MarkdownV2' }
    ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∞–π–º–µ—Ä–∞:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /see
bot.command('see', (ctx) => {
    const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',');
    if (!buttons.length) {
        return ctx.replyWithMarkdownV2(
            '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n–ü—Ä–∏–º–µ—Ä: `/see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2`',
            { parse_mode: 'MarkdownV2' }
        ).catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    const keyboard = Markup.keyboard(
        buttons.map(btn => [btn.trim()])
    ).resize().selective();

    activeKeyboards.set(ctx.from.id, keyboard);
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.command('stop', (ctx) => {
    if (activeKeyboards.has(ctx.from.id)) {
        ctx.reply('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞', Markup.removeKeyboard())
           .then(() => activeKeyboards.delete(ctx.from.id))
           .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e));
    } else {
        ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã').catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', (ctx) => {
    if (ctx.message.text.startsWith('/')) return;
    if (activeKeyboards.has(ctx.from.id)) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞–∂–∞–ª: ${ctx.message.text}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const PORT = process.env.PORT || 3000;
bot.launch({
    webhook: process.env.RENDER ? {
        domain: process.env.WEBHOOK_URL,
        port: PORT
    } : undefined
}).then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
