const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');
const express = require('express');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const OWNER_ID = 5005387093; // –í–∞—à ID –≤–ª–∞–¥–µ–ª—å—Ü–∞

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async function checkDB() {
  try {
    await pool.query('SELECT 1');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
    process.exit(1);
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞
bot.use(async (ctx, next) => {
  if (ctx.from) {
    const user = await pool.query('SELECT is_banned FROM users WHERE user_id = $1', [ctx.from.id]);
    if (user.rows.length > 0 && user.rows[0].is_banned) {
      return ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ');
    }
  }
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  try {
    await pool.query(`
      INSERT INTO users (user_id, username) 
      VALUES ($1, $2) 
      ON CONFLICT (user_id) DO UPDATE SET username = $2`,
      [ctx.from.id, ctx.from.username]
    );
    
    ctx.replyWithHTML(`
<b>üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!</b>

–Ø –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫.

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    `);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /start:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /profile
bot.command('profile', async (ctx) => {
  try {
    const user = await pool.query(`
      SELECT universal_id, nickname, is_premium, is_admin 
      FROM users 
      WHERE user_id = $1`,
      [ctx.from.id]
    );
    
    if (user.rows.length === 0) return ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const profileText = `
<blockquote><b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b></blockquote>

<blockquote><b>ID:</b> <i>${user.rows[0].universal_id}</i></blockquote>

<blockquote><b>–ù–∏–∫:</b> <i>${user.rows[0].nickname || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</i></blockquote>

<blockquote><b>–°—Ç–∞—Ç—É—Å:</b> <i>${user.rows[0].is_admin ? '–ê–¥–º–∏–Ω' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</i></blockquote>

<blockquote><b>–ü—Ä–µ–º–∏—É–º:</b> <i>${user.rows[0].is_premium ? '–î–∞' : '–ù–µ—Ç'}</i></blockquote>
    `;

    ctx.replyWithHTML(profileText);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /profile:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /ban
bot.command('ban', async (ctx) => {
  if (!await isAdmin(ctx)) return;
  
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  const targetId = await getUserIdByUniversalId(parseInt(args[1]));
  if (!targetId) return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  try {
    await pool.query('UPDATE users SET is_banned = TRUE WHERE user_id = $1', [targetId]);
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetId} –∑–∞–±–∞–Ω–µ–Ω`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /ban:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /unban
bot.command('unban', async (ctx) => {
  if (!await isAdmin(ctx)) return;
  
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  const targetId = await getUserIdByUniversalId(parseInt(args[1]));
  if (!targetId) return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  try {
    await pool.query('UPDATE users SET is_banned = FALSE WHERE user_id = $1', [targetId]);
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetId} —Ä–∞–∑–±–∞–Ω–µ–Ω`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /unban:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /tagall (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
bot.command('tagall', async (ctx) => {
  const user = await pool.query('SELECT is_premium, is_admin FROM users WHERE user_id = $1', [ctx.from.id]);
  const isPrivileged = user.rows.length > 0 && (user.rows[0].is_premium || user.rows[0].is_admin || ctx.from.id === OWNER_ID);
  
  if (!isPrivileged) {
    return ctx.reply('üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã—à–µ');
  }
  
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 2) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /tagall N —Å–æ–æ–±—â–µ–Ω–∏–µ');
  
  const count = parseInt(args[0]);
  if (isNaN(count) || count < 1 || count > 100) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100');
  
  const message = args.slice(1).join(' ');
  const users = await pool.query(`
    SELECT user_id, username 
    FROM users 
    WHERE is_banned = FALSE 
    AND user_id != ${ctx.from.id} 
    AND username IS NOT NULL
    ORDER BY RANDOM() 
    LIMIT $1`, 
    [count]
  );
  
  if (users.rows.length === 0) return ctx.reply('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–≥–∞');
  
  let mentions = '';
  users.rows.forEach(user => {
    mentions += `@${user.username} ${message}\n`;
  });
  
  ctx.reply(mentions);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
  ctx.replyWithHTML(`
<b>üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

<b>–ê–¥–º–∏–Ω:</b>
/ban ID - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban ID - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

<b>–ü—Ä–µ–º–∏—É–º:</b>
/tagall N —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–ø–æ–º—è–Ω—É—Ç—å N —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00
  `);
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function isAdmin(ctx) {
  try {
    const user = await pool.query('SELECT is_admin FROM users WHERE user_id = $1', [ctx.from.id]);
    return user.rows.length > 0 && user.rows[0].is_admin;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞:', err);
    return false;
  }
}

async function getUserIdByUniversalId(universalId) {
  try {
    const res = await pool.query('SELECT user_id FROM users WHERE universal_id = $1', [universalId]);
    return res.rows.length > 0 ? res.rows[0].user_id : null;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function start() {
  await checkDB();
  
  if (process.env.WEBHOOK_MODE === 'true') {
    const PORT = process.env.PORT || 3000;
    app.use(bot.webhookCallback('/webhook'));
    bot.telegram.setWebhook(process.env.WEBHOOK_URL);
    app.listen(PORT, () => console.log(`üöÄ –í–µ–±—Ö—É–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
  } else {
    bot.launch().then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ'));
  }
}

start().catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
  process.exit(1);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
