const { Telegraf } = require('telegraf');
const express = require('express');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –§–∏–∫—Å –¥–ª—è Render (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ https://)
const getWebhookUrl = () => {
  const domain = process.env.RENDER_EXTERNAL_URL || 'squezzy00.onrender.com';
  const cleanDomain = domain.replace(/^https?:\/\//, ''); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –µ—Å—Ç—å
  return `https://${cleanDomain}/webhook-${Math.random().toString(36).slice(2)}`;
};

const WEBHOOK_URL = getWebhookUrl();

console.log('=== –ù–ê–°–¢–†–û–ô–ö–ò ===');
console.log('BOT_TOKEN:', process.env.BOT_TOKEN ? 'OK' : 'MISSING');
console.log('WEBHOOK_URL:', WEBHOOK_URL);

// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç
app.get('/', (req, res) => res.send('–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram.'));

// –ö–æ–º–∞–Ω–¥—ã
bot.command('start', (ctx) => ctx.reply('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! /ping'));
bot.command('ping', (ctx) => ctx.reply(`üèì Pong! ${new Date().toLocaleTimeString()}`));

// –í–µ–±—Ö—É–∫
const setupWebhook = async () => {
  try {
    console.log('[1/3] –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞...');
    await bot.telegram.deleteWebhook({ drop_pending_updates: true });
    
    console.log('[2/3] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ:', WEBHOOK_URL);
    await bot.telegram.setWebhook(WEBHOOK_URL);
    
    console.log('[3/3] –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    return true;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.description || err.message);
    return false;
  }
};

app.use(bot.webhookCallback(WEBHOOK_URL.split('/').pop()));

// –ó–∞–ø—É—Å–∫
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  await setupWebhook();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏
  try {
    const me = await bot.telegram.getMe();
    console.log(`ü§ñ –ë–æ—Ç @${me.username} –≥–æ—Ç–æ–≤`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', err.message);
  }
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (err) => {
  console.error('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err.message);
});
