const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ –∏ –ë–î –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
function createSmartKeyboard(buttons) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (2-5)
  const buttonsPerRow = Math.min(
    Math.max(
      Math.floor(Math.sqrt(buttons.length)), 
      2
    ), 
    5
  );

  // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã
  const keyboard = [];
  for (let i = 0; i < buttons.length; i += buttonsPerRow) {
    const row = buttons.slice(i, i + buttonsPerRow);
    keyboard.push(row.map(text => Markup.button.text(text)));
  }

  return Markup.keyboard(keyboard).resize().oneTime();
}

// –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:

// –ö–æ–º–∞–Ω–¥–∞ /set
bot.command('set', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  
  if (buttons.length === 0 || buttons[0] === '') {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2', { reply_markup: { remove_keyboard: true } });
  }

  try {
    await pool.query(
      `INSERT INTO user_keyboards (user_id, buttons) VALUES ($1, $2)
       ON CONFLICT (user_id) DO UPDATE SET buttons = $2`,
      [ctx.from.id, buttons]
    );
    ctx.replyWithMarkdown(
      `‚úÖ *–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /open\n\n` +
      `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
      createSmartKeyboard(buttons)
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /set:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', { reply_markup: { remove_keyboard: true } });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /see
bot.command('see', (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  
  if (buttons.length === 0 || buttons[0] === '') {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2', { reply_markup: { remove_keyboard: true } });
  }

  activeKeyboards.set(ctx.from.id, buttons);
  ctx.replyWithMarkdown(
    `‚åõ *–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop\n\n` +
    `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
    createSmartKeyboard(buttons)
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /open
bot.command('open', async (ctx) => {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if (activeKeyboards.has(ctx.from.id)) {
      const buttons = activeKeyboards.get(ctx.from.id);
      return ctx.replyWithMarkdown(
        `‚åõ *–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
        createSmartKeyboard(buttons)
      );
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const userKb = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [ctx.from.id]);
    if (userKb.rows.length > 0) {
      return ctx.replyWithMarkdown(
        `‚úÖ *–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
        createSmartKeyboard(userKb.rows[0].buttons)
      );
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Ç–∞
    if (ctx.chat.type !== 'private') {
      const chatKb = await pool.query('SELECT buttons FROM chat_keyboards WHERE chat_id = $1', [ctx.chat.id]);
      if (chatKb.rows.length > 0) {
        return ctx.replyWithMarkdown(
          `üë• *–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —á–∞—Ç–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
          createSmartKeyboard(chatKb.rows[0].buttons)
        );
      }
    }

    ctx.reply('‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä', { reply_markup: { remove_keyboard: true } });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /open:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', { reply_markup: { remove_keyboard: true } });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /cfg
bot.command('cfg', async (ctx) => {
  if (ctx.chat.type === 'private') {
    return ctx.reply('–¢–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤!', { reply_markup: { remove_keyboard: true } });
  }
  
  try {
    const admins = await ctx.getChatAdministrators();
    const isAdmin = admins.some(a => a.user.id === ctx.from.id);
    if (!isAdmin) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!', { reply_markup: { remove_keyboard: true } });

    const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
    if (buttons.length === 0) {
      return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cfg –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2', { reply_markup: { remove_keyboard: true } });
    }

    await pool.query(
      `INSERT INTO chat_keyboards (chat_id, buttons) VALUES ($1, $2)
       ON CONFLICT (chat_id) DO UPDATE SET buttons = $2`,
      [ctx.chat.id, buttons]
    );
    ctx.reply('‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', { reply_markup: { remove_keyboard: true } });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /cfg:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', { reply_markup: { remove_keyboard: true } });
  }
});

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
