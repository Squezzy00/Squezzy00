require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');

const bot = new Telegraf(process.env.BOT_TOKEN);
let timerCounter = 1;
const activeKeyboards = new Map();
const activeTimers = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
function escapeMarkdown(text) {
    if (!text) return '';
    return text.toString()
        .replace(/\_/g, '\\_')
        .replace(/\*/g, '\\*')
        .replace(/\[/g, '\\[')
        .replace(/\]/g, '\\]')
        .replace(/\(/g, '\\(')
        .replace(/\)/g, '\\)')
        .replace(/\~/g, '\\~')
        .replace(/\`/g, '\\`')
        .replace(/\>/g, '\\>')
        .replace(/\#/g, '\\#')
        .replace(/\+/g, '\\+')
        .replace(/\-/g, '\\-')
        .replace(/\=/g, '\\=')
        .replace(/\|/g, '\\|')
        .replace(/\{/g, '\\{')
        .replace(/\}/g, '\\}')
        .replace(/\./g, '\\.')
        .replace(/\!/g, '\\!');
}

// –ü–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã
function parseDateTime(input) {
    input = input.trim();
    
    // –§–æ—Ä–º–∞—Ç "DD.MM.YYYY HH:mm" –∏–ª–∏ "DD.MM.YYYY"
    const fullDateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})(?: (\d{1,2}):(\d{2}))?$/;
    if (fullDateRegex.test(input)) {
        const [, day, month, year, hours, minutes] = input.match(fullDateRegex);
        const h = hours || '00';
        const m = minutes || '00';
        return new Date(year, month-1, day, h, m);
    }
    
    // –§–æ—Ä–º–∞—Ç "DD.MM HH:mm" –∏–ª–∏ "DD.MM"
    const shortDateRegex = /^(\d{1,2})\.(\d{1,2})(?: (\d{1,2}):(\d{2}))?$/;
    if (shortDateRegex.test(input)) {
        const [, day, month, hours, minutes] = input.match(shortDateRegex);
        const year = new Date().getFullYear();
        const h = hours || '00';
        const m = minutes || '00';
        return new Date(year, month-1, day, h, m);
    }
    
    // –§–æ—Ä–º–∞—Ç "HH:mm"
    const timeRegex = /^(\d{1,2}):(\d{2})$/;
    if (timeRegex.test(input)) {
        const [, hours, minutes] = input.match(timeRegex);
        const now = new Date();
        const date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hours, minutes);
        return date < now ? new Date(date.setDate(date.getDate() + 1)) : date;
    }
    
    return null;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
    const pad = num => num.toString().padStart(2, '0');
    return `${pad(date.getDate())}.${pad(date.getMonth()+1)}.${date.getFullYear()} ${pad(date.getHours())}:${pad(date.getMinutes())}`;
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
    ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n\n' +
        'üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/timer - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n' +
        '/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n' +
        '/see - –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n' +
        '/stop - —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n\n' +
        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
        '/timer 05.05.2025 14:00 –í—Å—Ç—Ä–µ—á–∞\n' +
        '/timer 10.05 –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n' +
        '/timer 18:00 –£–∂–∏–Ω'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /timer
bot.command('timer', (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 2) {
        return ctx.reply(
            '‚ùå –§–æ—Ä–º–∞—Ç: /timer –¥–∞—Ç–∞_–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n' +
            '–ü—Ä–∏–º–µ—Ä—ã:\n' +
            '/timer 04.05.2025 22:00 –ü—Ä–∏–≤–µ—Ç\n' +
            '/timer 10.05 15:30 –û–±–µ–¥\n' +
            '/timer 18:00 –£–∂–∏–Ω\n' +
            '/timer 05.05.2025 –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'
        );
    }

    let datetimeStr, text;
    for (let i = 1; i <= 2; i++) {
        const testStr = args.slice(0, i).join(' ');
        if (parseDateTime(testStr)) {
            datetimeStr = testStr;
            text = args.slice(i).join(' ');
            break;
        }
    }

    if (!datetimeStr) {
        return ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
            '"DD.MM.YYYY HH:mm"\n' +
            '"DD.MM.YYYY"\n' +
            '"DD.MM HH:mm"\n' +
            '"DD.MM"\n' +
            '"HH:mm"'
        );
    }

    const datetime = parseDateTime(datetimeStr);
    
    if (!datetime || isNaN(datetime.getTime())) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è!');
    }

    const now = new Date();
    if (datetime <= now) {
        return ctx.reply('‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!');
    }

    const timerId = timerCounter++;
    const timeout = datetime.getTime() - now.getTime();
    const username = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;

    const timer = setTimeout(async () => {
        try {
            await ctx.reply(
                `üîî ${username}, –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n` +
                `üìå –¢–µ–∫—Å—Ç: ${text}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${formatDate(datetime)}`
            );
            activeTimers.delete(timerId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        }
    }, timeout);

    activeTimers.set(timerId, { timer, userId: ctx.from.id, text, datetime });
    ctx.reply(
        `‚è≥ ${username}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n` +
        `üìå –¢–µ–∫—Å—Ç: ${text}\n` +
        `‚è± –°—Ä–∞–±–æ—Ç–∞–µ—Ç: ${formatDate(datetime)}\n` +
        `üÜî ID —Ç–∞–π–º–µ—Ä–∞: ${timerId}\n\n` +
        `–î–ª—è –æ—Ç–º–µ–Ω—ã: /cancel ${timerId}`
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /cancel
bot.command('cancel', (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    if (!args.length) {
        return ctx.replyWithMarkdownV2(
            '‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–π–º–µ—Ä–∞\n–ü—Ä–∏–º–µ—Ä: `/cancel 123`',
            { parse_mode: 'MarkdownV2' }
        ).catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    const timerId = parseInt(args[0]);
    if (!activeTimers.has(timerId)) {
        return ctx.reply('‚ùå –¢–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω').catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    const timer = activeTimers.get(timerId);
    if (timer.userId !== ctx.from.id) {
        return ctx.reply('‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–∞–π–º–µ—Ä—ã').catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    clearTimeout(timer.timer);
    activeTimers.delete(timerId);
    ctx.replyWithMarkdownV2(
        `‚úÖ *–¢–∞–π–º–µ—Ä ‚Ññ${timerId} –æ—Ç–º–µ–Ω—ë–Ω\\!*\n\n` +
        `üìå *–¢–µ–∫—Å—Ç:* ${escapeMarkdown(timer.text)}`,
        { parse_mode: 'MarkdownV2' }
    ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∞–π–º–µ—Ä–∞:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /see - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
bot.command('see', (ctx) => {
    const buttonsText = ctx.message.text.split(' ').slice(1).join(' ');
    if (!buttonsText) {
        return ctx.reply(
            '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n' +
            '–ü—Ä–∏–º–µ—Ä: /see –ö–Ω–æ–ø–∫–∞ 1, –ö–Ω–æ–ø–∫–∞ 2, –ö–Ω–æ–ø–∫–∞ 3'
        ).catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    const buttons = buttonsText.split(',').map(btn => btn.trim()).filter(btn => btn);
    if (buttons.length === 0) {
        return ctx.reply('‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫').catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }

    const keyboard = Markup.keyboard(
        buttons.map(btn => [btn])
    ).resize().oneTime();

    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard)
        .then(() => activeKeyboards.set(ctx.from.id, keyboard))
        .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.command('stop', (ctx) => {
    if (activeKeyboards.has(ctx.from.id)) {
        ctx.reply('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞', Markup.removeKeyboard())
           .then(() => activeKeyboards.delete(ctx.from.id))
           .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e));
    } else {
        ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã').catch(e => console.error('–û—à–∏–±–∫–∞:', e));
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
bot.on('text', (ctx) => {
    if (ctx.message.text.startsWith('/')) return;
    
    if (activeKeyboards.has(ctx.from.id)) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞–∂–∞–ª: ${ctx.message.text}`);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const PORT = process.env.PORT || 3000;
bot.launch({
    webhook: process.env.RENDER ? {
        domain: process.env.WEBHOOK_URL,
        port: PORT
    } : undefined
}).then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
