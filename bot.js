const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
const WEBHOOK_PATH = '/tg-webhook';
const DOMAIN = process.env.RENDER_EXTERNAL_URL || process.env.DOMAIN || 'your-domain.onrender.com';
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = `https://${DOMAIN.replace(/^https?:\/\//, '')}${WEBHOOK_PATH}`;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { 
    rejectUnauthorized: false 
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_keyboards (
        user_id BIGINT PRIMARY KEY,
        buttons TEXT[] NOT NULL DEFAULT '{}'
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS chat_keyboards (
        chat_id BIGINT PRIMARY KEY,
        buttons TEXT[] NOT NULL DEFAULT '{}'
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS reminders (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        username TEXT,
        text TEXT NOT NULL,
        end_time BIGINT NOT NULL,
        unit TEXT NOT NULL
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –≥–æ—Ç–æ–≤—ã');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', err);
  }
})();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const activeKeyboards = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –≤—ã–∑–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function createSmartKeyboard(buttons) {
  const MAX_BUTTONS_PER_ROW = 3;
  const keyboard = [];
  
  for (let i = 0; i < buttons.length; i += MAX_BUTTONS_PER_ROW) {
    const row = buttons.slice(i, i + MAX_BUTTONS_PER_ROW);
    keyboard.push(row.map(text => Markup.button.text(text)));
  }

  return Markup.keyboard(keyboard)
    .resize()
    .oneTime()
    .selective(); // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
  ctx.replyWithHTML(`
üëã <b>–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (/set)
- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (/5—Å, /10–º –∏ —Ç.–¥.)
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —á–∞—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/help</code> –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00
  `, { reply_markup: { remove_keyboard: true } });
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
  ctx.replyWithHTML(`
<b>üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>

<b>–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:</b>
/set –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/see –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
/open - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/stop - —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/del all - —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏
/del –ö–Ω–æ–ø–∫–∞ - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É
/cfg –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–∞—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>
/5—Å –¢–µ–∫—Å—Ç - –Ω–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
/10–º –¢–µ–∫—Å—Ç - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
/1—á –¢–µ–∫—Å—Ç - —á–µ—Ä–µ–∑ 1 —á–∞—Å
/2–¥ –¢–µ–∫—Å—Ç - —á–µ—Ä–µ–∑ 2 –¥–Ω—è
/timer - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00
  `, { reply_markup: { remove_keyboard: true } });
});

// –ö–æ–º–∞–Ω–¥–∞ /del
bot.command('del', async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length === 0) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /del all –∏–ª–∏ /del –ö–Ω–æ–ø–∫–∞', { reply_markup: { remove_keyboard: true } });
  }

  const userId = ctx.from.id;
  const toDelete = args.join(' ').trim();

  try {
    const result = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [userId]);
    
    if (result.rows.length === 0 || result.rows[0].buttons.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫', { reply_markup: { remove_keyboard: true } });
    }

    let buttons = result.rows[0].buttons;
    
    if (toDelete.toLowerCase() === 'all') {
      buttons = [];
    } else {
      buttons = buttons.filter(btn => btn !== toDelete);
      
      if (buttons.length === result.rows[0].buttons.length) {
        return ctx.reply('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { reply_markup: { remove_keyboard: true } });
      }
    }

    await pool.query(
      'UPDATE user_keyboards SET buttons = $1 WHERE user_id = $2',
      [buttons, userId]
    );

    ctx.reply(toDelete === 'all' ? '‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã' : `‚úÖ –ö–Ω–æ–ø–∫–∞ "${toDelete}" —É–¥–∞–ª–µ–Ω–∞`, 
      { reply_markup: { remove_keyboard: true } });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /del:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', { reply_markup: { remove_keyboard: true } });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /timer
bot.command('timer', async (ctx) => {
  const userId = ctx.from.id;
  
  try {
    const res = await pool.query(
      `SELECT text, unit, 
       (end_time - EXTRACT(EPOCH FROM NOW())*1000 AS ms_left
       FROM reminders 
       WHERE user_id = $1 AND end_time > EXTRACT(EPOCH FROM NOW())*1000`,
      [userId]
    );

    if (res.rows.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è≥', { reply_markup: { remove_keyboard: true } });
    }

    const timerList = res.rows.map(row => {
      const timeLeft = Math.ceil(row.ms_left / 1000);
      const units = { '—Å': '—Å–µ–∫', '–º': '–º–∏–Ω', '—á': '—á–∞—Å', '–¥': '–¥–Ω' };
      return `‚è± ${row.text} (–æ—Å—Ç–∞–ª–æ—Å—å: ${timeLeft}${units[row.unit] || '?'})`;
    }).join('\n');

    ctx.reply(`üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n${timerList}`, { reply_markup: { remove_keyboard: true } });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ë–î:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üò¢', { reply_markup: { remove_keyboard: true } });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–æ–≤
bot.hears(/^\/(\d+)([—Åc–ºm—áh–¥d])\s(.+)$/i, async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username || ctx.from.first_name;
  const [, amount, unit, text] = ctx.match;
  
  const unitMap = { '—Å':'—Å', 'c':'—Å', '–º':'–º', 'm':'–º', '—á':'—á', 'h':'—á', '–¥':'–¥', 'd':'–¥' };
  const cleanUnit = unitMap[unit.toLowerCase()];

  const ms = {
    '—Å': amount * 1000,
    '–º': amount * 60 * 1000,
    '—á': amount * 60 * 60 * 1000,
    '–¥': amount * 24 * 60 * 60 * 1000
  }[cleanUnit];

  const endTime = Date.now() + ms;

  try {
    await pool.query(
      'INSERT INTO reminders (user_id, username, text, end_time, unit) VALUES ($1, $2, $3, $4, $5)',
      [userId, username, text, endTime, cleanUnit]
    );

    setTimeout(async () => {
      await ctx.reply(`üîî ${username}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${text}`, { reply_markup: { remove_keyboard: true } });
      await pool.query('DELETE FROM reminders WHERE user_id = $1 AND text = $2 AND unit = $3', 
        [userId, text, cleanUnit]);
    }, ms);

    ctx.reply(`‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ${amount}${cleanUnit}: "${text}"`, 
      { reply_markup: { remove_keyboard: true } });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ë–î:', err);
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', { reply_markup: { remove_keyboard: true } });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /set
bot.command('set', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  
  if (buttons.length === 0 || buttons[0] === '') {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2', { reply_markup: { remove_keyboard: true } });
  }

  try {
    await pool.query(
      `INSERT INTO user_keyboards (user_id, buttons) VALUES ($1, $2)
       ON CONFLICT (user_id) DO UPDATE SET buttons = $2`,
      [ctx.from.id, buttons]
    );
    ctx.replyWithMarkdown(
      `‚úÖ *–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /open\n\n` +
      `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
      createSmartKeyboard(buttons)
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /set:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', { reply_markup: { remove_keyboard: true } });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /see
bot.command('see', (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  
  if (buttons.length === 0 || buttons[0] === '') {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2', { reply_markup: { remove_keyboard: true } });
  }

  activeKeyboards.set(ctx.from.id, buttons);
  ctx.replyWithMarkdown(
    `‚åõ *–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop\n\n` +
    `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
    createSmartKeyboard(buttons)
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.command('stop', (ctx) => {
  activeKeyboards.delete(ctx.from.id);
  ctx.reply('üóë –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', { reply_markup: { remove_keyboard: true } });
});

// –ö–æ–º–∞–Ω–¥–∞ /open
bot.command('open', async (ctx) => {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if (activeKeyboards.has(ctx.from.id)) {
      const buttons = activeKeyboards.get(ctx.from.id);
      return ctx.replyWithMarkdown(
        `‚åõ *–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
        createSmartKeyboard(buttons)
      );
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const userKb = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [ctx.from.id]);
    if (userKb.rows.length > 0) {
      return ctx.replyWithMarkdown(
        `‚úÖ *–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
        createSmartKeyboard(userKb.rows[0].buttons)
      );
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Ç–∞
    if (ctx.chat.type !== 'private') {
      const chatKb = await pool.query('SELECT buttons FROM chat_keyboards WHERE chat_id = $1', [ctx.chat.id]);
      if (chatKb.rows.length > 0) {
        return ctx.replyWithMarkdown(
          `üë• *–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —á–∞—Ç–∞*\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00`,
          createSmartKeyboard(chatKb.rows[0].buttons)
        );
      }
    }

    ctx.reply('‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä', { reply_markup: { remove_keyboard: true } });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /open:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', { reply_markup: { remove_keyboard: true } });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /cfg
bot.command('cfg', async (ctx) => {
  if (ctx.chat.type === 'private') {
    return ctx.reply('–¢–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤!', { reply_markup: { remove_keyboard: true } });
  }
  
  try {
    const admins = await ctx.getChatAdministrators();
    const isAdmin = admins.some(a => a.user.id === ctx.from.id);
    if (!isAdmin) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!', { reply_markup: { remove_keyboard: true } });

    const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
    if (buttons.length === 0) {
      return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cfg –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2', { reply_markup: { remove_keyboard: true } });
    }

    await pool.query(
      `INSERT INTO chat_keyboards (chat_id, buttons) VALUES ($1, $2)
       ON CONFLICT (chat_id) DO UPDATE SET buttons = $2`,
      [ctx.chat.id, buttons]
    );
    ctx.reply('‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', { reply_markup: { remove_keyboard: true } });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /cfg:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', { reply_markup: { remove_keyboard: true } });
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
  bot.handleUpdate(req.body, res).catch(err => {
    console.error('Webhook error:', err);
    res.status(200).end();
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Telegram Bot Status</title>
      <meta charset="UTF-8">
      <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        h1 { color: #0088cc; }
      </style>
    </head>
    <body>
      <h1>ü§ñ Telegram Bot</h1>
      <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</p>
      <p>Webhook URL: <code>${WEBHOOK_URL}</code></p>
    </body>
    </html>
  `);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.deleteWebhook();
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:', err);
    process.exit(1);
  }
});
