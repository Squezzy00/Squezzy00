const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WEBHOOK_PATH = '/tg-webhook';
const DOMAIN = process.env.RENDER_EXTERNAL_URL || process.env.DOMAIN;
const PORT = process.env.PORT || 10000;
const WEBHOOK_URL = `https://${DOMAIN.replace(/^https?:\/\//, '')}${WEBHOOK_PATH}`;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
const ADMINS = [5005387093]; // –í–∞—à user_id
const disabledCommands = new Set();
const userStates = new Map();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS disabled_commands (
        command TEXT PRIMARY KEY
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_keyboards (
        user_id BIGINT PRIMARY KEY,
        buttons TEXT[] NOT NULL DEFAULT '{}',
        keyboard_hidden BOOLEAN DEFAULT FALSE
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS reminders (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        chat_id BIGINT NOT NULL,
        message_id BIGINT,
        text TEXT NOT NULL,
        end_time BIGINT NOT NULL,
        unit TEXT NOT NULL
      )
    `);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const res = await pool.query('SELECT command FROM disabled_commands');
    res.rows.forEach(row => disabledCommands.add(row.command));
    console.log('‚úÖ –ë–î –≥–æ—Ç–æ–≤–∞');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', err);
  }
})();

// ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
function isAdmin(ctx) {
  return ADMINS.includes(ctx.from.id);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏
async function disableCommand(command) {
  disabledCommands.add(command);
  await pool.query(
    'INSERT INTO disabled_commands (command) VALUES ($1) ON CONFLICT (command) DO NOTHING',
    [command]
  );
}

async function enableCommand(command) {
  disabledCommands.delete(command);
  await pool.query('DELETE FROM disabled_commands WHERE command = $1', [command]);
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async function getKeyboardState(userId) {
  const res = await pool.query(
    'SELECT buttons, keyboard_hidden FROM user_keyboards WHERE user_id = $1', 
    [userId]
  );
  return res.rows[0] || { buttons: [], keyboard_hidden: false };
}

async function updateKeyboardState(userId, hidden) {
  await pool.query(
    'UPDATE user_keyboards SET keyboard_hidden = $1 WHERE user_id = $2',
    [hidden, userId]
  );
}

function createKeyboard(buttons, isHidden) {
  if (isHidden) {
    return Markup.keyboard([
      [Markup.button.text('üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')]
    ]).resize();
  }

  const keyboard = [];
  const rowSize = Math.min(4, buttons.length);
  
  for (let i = 0; i < buttons.length; i += rowSize) {
    keyboard.push(buttons.slice(i, i + rowSize));
  }
  keyboard.push(['üìã –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É']);
  
  return Markup.keyboard(keyboard).resize();
}

// ==================== –ö–û–ú–ê–ù–î–´ ====================

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
function commandHandler(command, handler) {
  bot.command(command, async (ctx) => {
    if (disabledCommands.has(command) && !isAdmin(ctx)) {
      return ctx.reply(`‚ùå –ö–æ–º–∞–Ω–¥–∞ /${command} –æ—Ç–∫–ª—é—á–µ–Ω–∞`);
    }
    return handler(ctx);
  });
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
commandHandler('cmd', async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 2) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cmd [enable|disable] [–∫–æ–º–∞–Ω–¥–∞]\n–ü—Ä–∏–º–µ—Ä: /cmd disable timer');
  }

  const [action, cmd] = args;
  const command = cmd.replace(/^\//, '').toLowerCase();

  if (action === 'disable') {
    await disableCommand(command);
    ctx.reply(`‚úÖ /${command} –æ—Ç–∫–ª—é—á–µ–Ω–∞`);
  } else if (action === 'enable') {
    await enableCommand(command);
    ctx.reply(`‚úÖ /${command} –≤–∫–ª—é—á–µ–Ω–∞`);
  } else {
    ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ enable –∏–ª–∏ disable');
  }
});

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
commandHandler('start', (ctx) => {
  ctx.replyWithHTML(`üëã <b>–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥`);
});

commandHandler('help', (ctx) => {
  ctx.replyWithHTML(`
<b>üìã –ö–æ–º–∞–Ω–¥—ã:</b>
/set –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/see –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
/open - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/stop - —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/5—Å —Ç–µ–∫—Å—Ç - –Ω–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
/timer - –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
${isAdmin(ctx) ? '\n<b>üëë –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n/cmd [enable|disable] [–∫–æ–º–∞–Ω–¥–∞]' : ''}
  `);
});

commandHandler('set', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  if (buttons.length === 0) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é');

  try {
    await pool.query(
      `INSERT INTO user_keyboards (user_id, buttons) VALUES ($1, $2)
       ON CONFLICT (user_id) DO UPDATE SET buttons = $2`,
      [ctx.from.id, buttons]
    );
    await updateKeyboardState(ctx.from.id, false);
    ctx.reply('‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', createKeyboard(buttons, false));
  } catch (err) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
  }
});

commandHandler('see', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  if (buttons.length === 0) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é');

  userStates.set(ctx.from.id, { buttons, keyboardHidden: false });
  ctx.reply('‚åõ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', createKeyboard(buttons, false));
});

commandHandler('open', async (ctx) => {
  const { buttons, keyboard_hidden } = await getKeyboardState(ctx.from.id);
  if (buttons.length === 0) return ctx.reply('‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
  ctx.reply('–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', createKeyboard(buttons, keyboard_hidden));
});

commandHandler('stop', (ctx) => {
  ctx.reply('üóë –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', Markup.removeKeyboard());
});

commandHandler('timer', async (ctx) => {
  try {
    const res = await pool.query(
      `SELECT text, unit, (end_time - $1) / 1000 AS seconds_left
       FROM reminders WHERE user_id = $2 AND end_time > $1`,
      [Date.now(), ctx.from.id]
    );
    
    if (res.rows.length === 0) return ctx.reply('‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
    
    const list = res.rows.map(r => 
      `‚è± ${r.text} (–æ—Å—Ç–∞–ª–æ—Å—å: ${Math.ceil(r.seconds_left)}${r.unit})`
    ).join('\n');
    ctx.reply(`üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n${list}`);
  } catch (err) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–æ–≤ (/5—Å, /10–º –∏ —Ç.–¥.)
bot.hears(/^\/(\d+)([—Åc–ºm—áh–¥d])\s(.+)$/i, async (ctx) => {
  if (disabledCommands.has('reminder') && !isAdmin(ctx)) {
    return ctx.reply('‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
  }

  const [, amount, unit, text] = ctx.match;
  const unitMap = { '—Å':'—Å', 'c':'—Å', '–º':'–º', 'm':'–º', '—á':'—á', 'h':'—á', '–¥':'–¥', 'd':'–¥' };
  const cleanUnit = unitMap[unit.toLowerCase()] || '—Å';

  const ms = {
    '—Å': amount * 1000,
    '–º': amount * 60 * 1000,
    '—á': amount * 60 * 60 * 1000,
    '–¥': amount * 24 * 60 * 60 * 1000
  }[cleanUnit];

  try {
    await pool.query(
      `INSERT INTO reminders (user_id, chat_id, message_id, text, end_time, unit)
       VALUES ($1, $2, $3, $4, $5, $6)`,
      [ctx.from.id, ctx.chat.id, ctx.message.message_id, text, Date.now() + ms, cleanUnit]
    );

    setTimeout(async () => {
      await ctx.reply(`üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${text}`);
      await pool.query(
        'DELETE FROM reminders WHERE message_id = $1',
        [ctx.message.message_id]
      );
    }, ms);

    ctx.reply(`‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${amount}${cleanUnit}: "${text}"`);
  } catch (err) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
  }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
bot.hears(['üìã –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É'], async (ctx) => {
  const userId = ctx.from.id;
  let buttons = [];
  
  const kbState = await getKeyboardState(userId);
  const newState = !kbState.keyboard_hidden;
  
  if (userStates.has(userId)) {
    buttons = userStates.get(userId).buttons;
  } else if (kbState.buttons) {
    buttons = kbState.buttons;
  }

  await updateKeyboardState(userId, newState);
  ctx.reply(
    newState ? '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞' : '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞',
    createKeyboard(buttons, newState)
  );
});

// ==================== –ó–ê–ü–£–°–ö ====================
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
  bot.handleUpdate(req.body, res);
});

app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  await bot.telegram.deleteWebhook();
  await bot.telegram.setWebhook(WEBHOOK_URL);
  console.log(`‚úÖ –í–µ–±—Ö—É–∫: ${WEBHOOK_URL}`);
});
