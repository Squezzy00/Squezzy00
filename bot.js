require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');

const bot = new Telegraf(process.env.BOT_TOKEN);
const BOT_OWNER_ID = 5005387093; // –í–∞—à ID –∞–∫–∫–∞—É–Ω—Ç–∞
let timerCounter = 1;
const activeKeyboards = new Map();
const activeTimers = new Map();
const chatButtons = new Map();
const disabledCommands = new Set();
const reportBans = new Set(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const activeReports = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤ (userId -> message)

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id
const CHATS_FILE = path.join(__dirname, 'chats.json');
// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–Ω–æ–≤ —Ä–µ–ø–æ—Ä—Ç–æ–≤
const BANS_FILE = path.join(__dirname, 'report_bans.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
let knownChats = new Set();
let savedReportBans = new Set();

try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤
    if (fs.existsSync(CHATS_FILE)) {
        const data = fs.readFileSync(CHATS_FILE, 'utf-8');
        knownChats = new Set(JSON.parse(data));
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–Ω–æ–≤
    if (fs.existsSync(BANS_FILE)) {
        const data = fs.readFileSync(BANS_FILE, 'utf-8');
        savedReportBans = new Set(JSON.parse(data));
        reportBans = new Set(savedReportBans);
    }
} catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', e);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
    try {
        fs.writeFileSync(CHATS_FILE, JSON.stringify([...knownChats]), 'utf-8');
        fs.writeFileSync(BANS_FILE, JSON.stringify([...reportBans]), 'utf-8');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}

// Middleware –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id
bot.use((ctx, next) => {
    if (ctx.chat) {
        if (!knownChats.has(ctx.chat.id)) {
            knownChats.add(ctx.chat.id);
            saveData();
        }
    }
    return next();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
function isOwner(ctx) {
    return ctx.from.id === BOT_OWNER_ID;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
async function isAdmin(ctx) {
    if (ctx.chat.type === 'private') return false;
    try {
        const member = await ctx.getChatMember(ctx.from.id);
        return ['creator', 'administrator'].includes(member.status);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', e);
        return false;
    }
}

function getTimeString(amount, unit) {
    const units = {
        '—Å': ['—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'],
        '–º': ['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'],
        '—á': ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'],
        '–¥': ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']
    };

    let word;
    if (amount % 10 === 1 && amount % 100 !== 11) {
        word = units[unit][0];
    } else if ([2, 3, 4].includes(amount % 10) && ![12, 13, 14].includes(amount % 100)) {
        word = units[unit][1];
    } else {
        word = units[unit][2];
    }

    return `${amount} ${word}`;
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.use((ctx, next) => {
    if (ctx.message && ctx.message.text && ctx.message.text.startsWith('/')) {
        const command = ctx.message.text.split(' ')[0].slice(1).toLowerCase();
        if (disabledCommands.has(command) && !isOwner(ctx)) {
            return ctx.reply(`‚ùå –ö–æ–º–∞–Ω–¥–∞ /${command} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞`);
        }
    }
    return next();
});

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start((ctx) => {
    const username = ctx.message.from.username ? `@${ctx.message.from.username}` : ctx.message.from.first_name;
    ctx.reply(
        `üï∞Ô∏è –ü—Ä–∏–≤–µ—Ç, ${username}, –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞!\n\n` +
        `‚ú® –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n` +
        `/1—Å –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ - —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É\n` +
        `/5–º –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É - —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n` +
        `/2—á –ü—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n` +
        `/3–¥ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç - —á–µ—Ä–µ–∑ 3 –¥–Ω—è\n\n` +
        `üìù –ü—Ä–∏–º–µ—Ä: /10–º –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É\n\n` +
        `üÜï –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `/see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2 - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n` +
        `/stop - —Å–∫—Ä—ã—Ç—å —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n` +
        `/timers - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã\n` +
        `/cancel [ID] - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä\n` +
        `/open - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞\n\n` +
        `DEVELOPER: @SQUEZZY00`
    ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ start:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /see - —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
bot.command('see', (ctx) => {
    const userId = ctx.from.id;
    const args = ctx.message.text.split(' ').slice(1).join(' ').split(',');

    if (args.length === 0 || args[0].trim() === '') {
        return ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n' +
            '‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2, –ö–Ω–æ–ø–∫–∞3\n' +
            'üîπ –ü—Ä–∏–º–µ—Ä: /see –î–∞, –ù–µ—Ç, –í–æ–∑–º–æ–∂–Ω–æ\n\n' +
            'DEVELOPER: @SQUEZZY00'
        ).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ see:', e));
    }

    const buttons = args.map(btn => btn.trim()).filter(btn => btn !== '');
    const buttonRows = [];
    for (let i = 0; i < buttons.length; i += 4) {
        buttonRows.push(buttons.slice(i, i + 4));
    }

    const keyboard = Markup.keyboard(buttonRows)
        .resize()
        .selective();

    activeKeyboards.set(userId, keyboard);

    ctx.reply('–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\nDEVELOPER: @SQUEZZY00', {
        reply_markup: keyboard.reply_markup,
        reply_to_message_id: ctx.message.message_id
    }).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
bot.command('cmdoff', (ctx) => {
    if (!isOwner(ctx)) {
        return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞');
    }

    const command = ctx.message.text.split(' ')[1];
    if (!command) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: /cmdoff see');
    }

    disabledCommands.add(command);
    ctx.reply(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ /${command} –æ—Ç–∫–ª—é—á–µ–Ω–∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
bot.command('cmdon', (ctx) => {
    if (!isOwner(ctx)) {
        return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞');
    }

    const command = ctx.message.text.split(' ')[1];
    if (!command) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: /cmdon see');
    }

    disabledCommands.delete(command);
    ctx.reply(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ /${command} –≤–∫–ª—é—á–µ–Ω–∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—â–∏—Ö –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É –∏ –∞–¥–º–∏–Ω–∞–º —á–∞—Ç–∞)
bot.command('set', async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (–≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω)
    const isAdminOrOwner = isOwner(ctx) || (ctx.chat.type !== 'private' && await isAdmin(ctx));
    
    if (!isAdminOrOwner) {
        return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞');
    }

    const chatId = ctx.chat.id;
    const args = ctx.message.text.split(' ').slice(1).join(' ').split(',');
    
    if (args.length === 0 || args[0].trim() === '') {
        return ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n' +
            '‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2, –ö–Ω–æ–ø–∫–∞3\n' +
            'üîπ –ü—Ä–∏–º–µ—Ä: /set –î–∞, –ù–µ—Ç, –í–æ–∑–º–æ–∂–Ω–æ'
        );
    }

    const buttons = args.map(btn => btn.trim()).filter(btn => btn !== '');
    const buttonRows = [];
    for (let i = 0; i < buttons.length; i += 4) {
        buttonRows.push(buttons.slice(i, i + 4));
    }

    chatButtons.set(chatId, buttonRows);
    ctx.reply(`‚úÖ –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (${buttons.length} –∫–Ω–æ–ø–æ–∫)`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–±—â–∏—Ö –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–∞
bot.command('open', (ctx) => {
    const chatId = ctx.chat.id;
    const userId = ctx.from.id;
    
    if (!chatButtons.has(chatId)) {
        return ctx.reply('‚ùå –î–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏');
    }

    const buttonRows = chatButtons.get(chatId);
    const keyboard = Markup.keyboard(buttonRows)
        .resize()
        .selective();

    activeKeyboards.set(userId, keyboard);

    ctx.reply('–û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞:', {
        reply_markup: keyboard.reply_markup,
        reply_to_message_id: ctx.message.message_id
    }).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /stop - —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
bot.command('stop', (ctx) => {
    const userId = ctx.from.id;

    if (activeKeyboards.has(userId)) {
        ctx.reply('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞', {
            reply_markup: { remove_keyboard: true },
            reply_to_message_id: ctx.message.message_id
        }).then(() => {
            activeKeyboards.delete(userId);
        }).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e));
    } else {
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /see –∏–ª–∏ /open', {
            reply_to_message_id: ctx.message.message_id
        }).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ stop:', e));
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /report - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É
bot.command('report', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    if (reportBans.has(userId)) {
        return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–æ–≤');
    }

    const reportText = ctx.message.text.split(' ').slice(1).join(' ');
    if (!reportText) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: /report –ù–∞—à–µ–ª –±–∞–≥ –≤ –∫–æ–º–∞–Ω–¥–µ /timer');
    }

    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        activeReports.set(userId, {
            chatId: ctx.chat.id,
            messageId: ctx.message.message_id,
            text: reportText
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É
        await ctx.telegram.sendMessage(
            BOT_OWNER_ID,
            `üö® –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –æ—Ç ${ctx.from.username || ctx.from.first_name} (ID: ${userId})\n` +
            `üìù –¢–µ–∫—Å—Ç: ${reportText}\n\n` +
            `–û—Ç–≤–µ—Ç–∏—Ç—å: /reply_${userId} –≤–∞—à_–æ—Ç–≤–µ—Ç`,
            Markup.inlineKeyboard([
                Markup.button.callback('üî® –ó–∞–±–∞–Ω–∏—Ç—å', `ban_${userId}`),
                Markup.button.callback('‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å', `replybtn_${userId}`)
            ])
        );

        await ctx.reply('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞:', e);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ —Ä–µ–ø–æ—Ä—Ç—ã
bot.hears(/^\/reply_(\d+)\s+(.+)/, async (ctx) => {
    if (!isOwner(ctx)) return;

    const userId = parseInt(ctx.match[1]);
    const replyText = ctx.match[2];
    const report = activeReports.get(userId);

    if (!report) {
        return ctx.reply('‚ùå –†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª');
    }

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.telegram.sendMessage(
            report.chatId,
            `üì¢ –û—Ç–≤–µ—Ç –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ –≤–∞—à —Ä–µ–ø–æ—Ä—Ç:\n` +
            `"${report.text}"\n\n` +
            `üí¨ –û—Ç–≤–µ—Ç: ${replyText}`,
            { reply_to_message_id: report.messageId }
        );

        // –£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        activeReports.delete(userId);
        await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', e);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç');
    }
});

// –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞/–±–∞–Ω–∞
bot.action(/^ban_(\d+)$/, async (ctx) => {
    if (!isOwner(ctx)) {
        await ctx.answerCbQuery('–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞');
        return;
    }

    const userId = parseInt(ctx.match[1]);
    reportBans.add(userId);
    saveData();

    await ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω');
    await ctx.editMessageText(
        ctx.callbackQuery.message.text + '\n\nüî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤',
        { reply_markup: Markup.inlineKeyboard([]) }
    );
});

bot.action(/^replybtn_(\d+)$/, async (ctx) => {
    if (!isOwner(ctx)) {
        await ctx.answerCbQuery('–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞');
        return;
    }

    const userId = ctx.match[1];
    await ctx.answerCbQuery(`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply_${userId} –≤–∞—à_–æ—Ç–≤–µ—Ç`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('unban_report', async (ctx) => {
    if (!isOwner(ctx)) return;

    const userId = parseInt(ctx.message.text.split(' ')[1]);
    if (isNaN(userId)) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ü—Ä–∏–º–µ—Ä: /unban_report 123456789');
    }

    if (reportBans.has(userId)) {
        reportBans.delete(userId);
        saveData();
        await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–∞–Ω–µ–Ω`);
    } else {
        await ctx.reply('‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /timers - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
bot.command('timers', (ctx) => {
    const userId = ctx.from.id;
    const userTimers = Array.from(activeTimers.entries())
        .filter(([_, timer]) => timer.userId === userId);

    if (userTimers.length === 0) {
        return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.\n\nDEVELOPER: @SQUEZZY00')
            .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ timers:', e));
    }

    let message = '‚è≥ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã:\n\n';
    userTimers.forEach(([timerId, timer]) => {
        message += `üÜî ID: ${timerId}\n` +
                  `üìù –¢–µ–∫—Å—Ç: ${timer.text}\n` +
                  `‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: ${getTimeString(timer.amount, timer.unit)}\n\n`;
    });
    message += '–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel [ID]\n\nDEVELOPER: @SQUEZZY00';

    ctx.reply(message).catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞
bot.command('cancel', (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã\n–ü—Ä–∏–º–µ—Ä: /cancel 5\n\nDEVELOPER: @SQUEZZY00')
            .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ cancel:', e));
    }

    const timerId = parseInt(args[1]);
    if (isNaN(timerId)) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∞–π–º–µ—Ä–∞\n\nDEVELOPER: @SQUEZZY00')
            .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ cancel:', e));
    }

    const timer = activeTimers.get(timerId);
    if (!timer || timer.userId !== ctx.from.id) {
        return ctx.reply('‚ùå –¢–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º\n\nDEVELOPER: @SQUEZZY00')
            .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ cancel:', e));
    }

    clearTimeout(timer.timeout);
    activeTimers.delete(timerId);
    ctx.reply(`‚úÖ –¢–∞–π–º–µ—Ä #${timerId} –æ—Ç–º–µ–Ω–µ–Ω\n\nDEVELOPER: @SQUEZZY00`)
        .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã:', e));
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.command('broadcast', async (ctx) => {
    if (!isOwner(ctx)) {
        return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞');
    }

    const messageText = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageText) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n–ü—Ä–∏–º–µ—Ä: /broadcast –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤');
    }

    try {
        const chats = [...knownChats];
        let successCount = 0;
        let failCount = 0;

        await ctx.reply(`‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${chats.length} —á–∞—Ç–æ–≤...`);

        for (const chatId of chats) {
            try {
                await ctx.telegram.sendMessage(
                    chatId, 
                    `üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n${messageText}\n\nDEVELOPER: @SQUEZZY00`
                );
                successCount++;
                // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                await new Promise(resolve => setTimeout(resolve, 100));
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç ${chatId}:`, error);
                failCount++;
                // –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ chat_id –∏–∑ —Å–ø–∏—Å–∫–∞
                knownChats.delete(chatId);
            }
        }

        saveChats();
        await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–£—Å–ø–µ—à–Ω–æ: ${successCount}\n–ù–µ —É–¥–∞–ª–æ—Å—å: ${failCount}\n–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: ${knownChats.size}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
bot.hears(/^\/(\d+)(—Å|–º|—á|–¥)\s+(.+)$/, async (ctx) => {
    const amount = parseInt(ctx.match[1]);
    const unit = ctx.match[2];
    const text = ctx.match[3];
    const userId = ctx.message.from.id;
    const chatId = ctx.message.chat.id;
    const username = ctx.message.from.username ? `@${ctx.message.from.username}` : ctx.message.from.first_name;
    const currentTimerNumber = timerCounter++;

    let milliseconds = 0;
    switch (unit) {
        case '—Å': milliseconds = amount * 1000; break;
        case '–º': milliseconds = amount * 60 * 1000; break;
        case '—á': milliseconds = amount * 60 * 60 * 1000; break;
        case '–¥': milliseconds = amount * 24 * 60 * 60 * 1000; break;
    }

    if (milliseconds > 0) {
        const timeString = getTimeString(amount, unit);
        try {
            await ctx.reply(
                `‚è≥ ${username}, –¢–∞–π–º–µ—Ä ‚Ññ${currentTimerNumber} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n` +
                `üîπ –¢–µ–∫—Å—Ç: ${text}\n` +
                `‚è±Ô∏è –°—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑: ${timeString}\n` +
                `üÜî ID —Ç–∞–π–º–µ—Ä–∞: ${currentTimerNumber}\n\n` +
                `DEVELOPER: @SQUEZZY00`
            );

            const timeout = setTimeout(async () => {
                try {
                    const keyboard = Markup.inlineKeyboard([
                        Markup.button.callback('üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ', `restart_${amount}${unit}_${text}`)
                    ]);
                    
                    await ctx.telegram.sendMessage(
                        chatId,
                        `üîî ${username}, –¢–∞–π–º–µ—Ä ‚Ññ${currentTimerNumber}!\n` +
                        `üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${text}\n` +
                        `üéâ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ!\n\n` +
                        `DEVELOPER: @SQUEZZY00`,
                        { reply_markup: keyboard.reply_markup }
                    );
                    activeTimers.delete(currentTimerNumber);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
                }
            }, milliseconds);

            activeTimers.set(currentTimerNumber, {
                userId,
                chatId,
                amount,
                unit,
                text,
                timeout
            });
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞:', e);
        }
    } else {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /1—Å, /5–º, /2—á –∏–ª–∏ /3–¥\n\nDEVELOPER: @SQUEZZY00')
           .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–∫–∏ —Ç–∞–π–º–µ—Ä–∞:', e));
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
bot.action(/^restart_(\d+)(—Å|–º|—á|–¥)_(.+)$/, async (ctx) => {
    const amount = parseInt(ctx.match[1]);
    const unit = ctx.match[2];
    const text = ctx.match[3];
    const userId = ctx.from.id;
    const chatId = ctx.callbackQuery.message.chat.id;
    const username = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
    const currentTimerNumber = timerCounter++;

    let milliseconds = 0;
    switch (unit) {
        case '—Å': milliseconds = amount * 1000; break;
        case '–º': milliseconds = amount * 60 * 1000; break;
        case '—á': milliseconds = amount * 60 * 60 * 1000; break;
        case '–¥': milliseconds = amount * 24 * 60 * 60 * 1000; break;
    }

    if (milliseconds > 0) {
        const timeString = getTimeString(amount, unit);
        try {
            await ctx.reply(
                `‚è≥ ${username}, –¢–∞–π–º–µ—Ä ‚Ññ${currentTimerNumber} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n` +
                `üîπ –¢–µ–∫—Å—Ç: ${text}\n` +
                `‚è±Ô∏è –°—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑: ${timeString}\n` +
                `üÜî ID —Ç–∞–π–º–µ—Ä–∞: ${currentTimerNumber}\n\n` +
                `DEVELOPER: @SQUEZZY00`
            );

            const timeout = setTimeout(async () => {
                try {
                    const keyboard = Markup.inlineKeyboard([
                        Markup.button.callback('üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ', `restart_${amount}${unit}_${text}`)
                    ]);
                    
                    await ctx.telegram.sendMessage(
                        chatId,
                        `üîî ${username}, –¢–∞–π–º–µ—Ä ‚Ññ${currentTimerNumber}!\n` +
                        `üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${text}\n` +
                        `üéâ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ!\n\n` +
                        `DEVELOPER: @SQUEZZY00`,
                        { reply_markup: keyboard.reply_markup }
                    );
                    activeTimers.delete(currentTimerNumber);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
                }
            }, milliseconds);

            activeTimers.set(currentTimerNumber, {
                userId,
                chatId,
                amount,
                unit,
                text,
                timeout
            });

            await ctx.answerCbQuery('‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∑–∞–Ω–æ–≤–æ');
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞:', e);
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)
bot.on('text', (ctx) => {
    const text = ctx.message.text;
    const userId = ctx.from.id;

    if (text.startsWith('/')) return;

    if (activeKeyboards.has(userId)) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞–∂–∞–ª: ${text}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const PORT = process.env.PORT || 3000;
bot.launch({
    webhook: process.env.RENDER ? {
        domain: process.env.WEBHOOK_URL,
        port: PORT
    } : undefined
})
.then(() => console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'))
.catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', e));

process.once('SIGINT', () => {
    saveChats();
    bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
    saveChats();
    bot.stop('SIGTERM');
});
