const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');
const express = require('express');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async function initDB() {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        first_name TEXT
      );
    `);
    await client.query(`
      CREATE TABLE IF NOT EXISTS games (
        game_id SERIAL PRIMARY KEY,
        player1_id BIGINT NOT NULL,
        player2_id BIGINT,
        current_player BIGINT,
        player1_field JSONB,
        player2_field JSONB,
        player1_shots JSONB DEFAULT '{}',
        player2_shots JSONB DEFAULT '{}',
        status TEXT DEFAULT 'waiting',
        created_at TIMESTAMP DEFAULT NOW()
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', err);
    throw err;
  } finally {
    client.release();
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è
function generateEmptyField() {
  const field = [];
  for (let i = 0; i < 10; i++) {
    field.push(Array(10).fill(0)); // 0 - –ø—É—Å—Ç–æ, 1 - –∫–æ—Ä–∞–±–ª—å
  }
  return field;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã
function generateShootingKeyboard(shots = {}) {
  const letters = ['A','B','C','D','E','F','G','H','I','J'];
  const keyboard = [];
  
  for (let y = 0; y < 10; y++) {
    const row = [];
    for (let x = 1; x <= 10; x++) {
      const coord = `${letters[y]}${x}`;
      const shot = shots[coord];
      
      let emoji = '‚¨ú';
      if (shot === 'hit') emoji = 'üí•';
      if (shot === 'miss') emoji = 'üåä';
      
      row.push(Markup.button.callback(
        emoji, 
        `shoot_${coord}`
      ));
    }
    keyboard.push(row);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–¥–∞—Ç—å—Å—è
  keyboard.push([Markup.button.callback('üè≥Ô∏è –°–¥–∞—Ç—å—Å—è', 'surrender')]);
  
  return Markup.inlineKeyboard(keyboard);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π
function placeShipsAutomatically() {
  const sizes = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];
  const field = generateEmptyField();
  
  for (const size of sizes) {
    let placed = false;
    while (!placed) {
      const vertical = Math.random() > 0.5;
      const x = Math.floor(Math.random() * (vertical ? 10 : 10 - size));
      const y = Math.floor(Math.random() * (vertical ? 10 - size : 10));
      
      let canPlace = true;
      for (let i = 0; i < size; i++) {
        const checkX = vertical ? x : x + i;
        const checkY = vertical ? y + i : y;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–µ—Ç–∫–∏ –∏ —Å–æ—Å–µ–¥–Ω–∏—Ö
        for (let dx = -1; dx <= 1; dx++) {
          for (let dy = -1; dy <= 1; dy++) {
            const nx = checkX + dx;
            const ny = checkY + dy;
            if (nx >= 0 && nx < 10 && ny >= 0 && ny < 10 && field[ny][nx] === 1) {
              canPlace = false;
            }
          }
        }
      }
      
      if (canPlace) {
        for (let i = 0; i < size; i++) {
          if (vertical) {
            field[y + i][x] = 1;
          } else {
            field[y][x + i] = 1;
          }
        }
        placed = true;
      }
    }
  }
  
  return field;
}

// –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
bot.command('start_battle', async (ctx) => {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await pool.query(
      `INSERT INTO users (user_id, username, first_name) 
       VALUES ($1, $2, $3) 
       ON CONFLICT (user_id) DO UPDATE SET username = $2, first_name = $3`,
      [ctx.from.id, ctx.from.username, ctx.from.first_name]
    );
    
    ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:',
      Markup.inlineKeyboard([
        [Markup.button.callback('ü§ñ –ò–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞', 'play_vs_bot')],
        [Markup.button.callback('üë• –ò–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–æ–º', 'play_vs_friend')]
      ])
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ start_battle:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
bot.action('play_vs_bot', async (ctx) => {
  try {
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å –±–æ—Ç–æ–º
    const field = placeShipsAutomatically();
    const res = await pool.query(
      `INSERT INTO games (player1_id, player2_id, current_player, player1_field, player2_field, status)
       VALUES ($1, $2, $3, $4, $5, $6) RETURNING game_id`,
      [ctx.from.id, 0, ctx.from.id, field, placeShipsAutomatically(), 'active']
    );
    
    const gameId = res.rows[0].game_id;
    await ctx.reply('üö¢ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à —Ö–æ–¥:');
    await ctx.reply('–í–∞—à–µ –ø–æ–ª–µ:');
    await showPlayerField(ctx, gameId, ctx.from.id);
    await ctx.reply('–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:', generateShootingKeyboard());
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ play_vs_bot:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã');
  }
});

bot.action('play_vs_friend', async (ctx) => {
  try {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –¥—Ä—É–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä /play_with @username)');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ play_vs_friend:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞
bot.command('play_with', async (ctx) => {
  const targetInput = ctx.message.text.split(' ')[1];
  if (!targetInput) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /play_with @username –∏–ª–∏ /play_with 123456');
  }

  try {
    // –ü–∞—Ä—Å–∏–º ID –∏–∑ username –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
    let targetId = targetInput.startsWith('@') 
      ? targetInput.slice(1) 
      : parseInt(targetInput);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRes = await pool.query(
      'SELECT user_id FROM users WHERE user_id = $1 OR username = $2',
      [targetId, targetInput]
    );
    
    if (userRes.rows.length === 0) {
      return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    targetId = userRes.rows[0].user_id;
    
    // –°–æ–∑–¥–∞–µ–º –æ–∂–∏–¥–∞—é—â—É—é –∏–≥—Ä—É
    const field = placeShipsAutomatically();
    const res = await pool.query(
      `INSERT INTO games (player1_id, player2_id, current_player, player1_field, status)
       VALUES ($1, $2, $1, $3, 'waiting') RETURNING game_id`,
      [ctx.from.id, targetId, field]
    );
    
    const gameId = res.rows[0].game_id;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥—Ä—É–≥—É
    await ctx.telegram.sendMessage(
      targetId,
      `üéÆ ${ctx.from.first_name} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤ –ú–æ—Ä—Å–∫–æ–π –±–æ–π!`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `accept_${gameId}`)],
        [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `decline_${gameId}`)]
      ])
    );
    
    await ctx.reply('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ play_with:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∏–≥—Ä—ã
bot.action(/^accept_/, async (ctx) => {
  const gameId = parseInt(ctx.match[0].replace('accept_', ''));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É
    const gameRes = await pool.query(
      'SELECT * FROM games WHERE game_id = $1 AND player2_id = $2 AND status = $3',
      [gameId, ctx.from.id, 'waiting']
    );
    
    if (gameRes.rows.length === 0) {
      return ctx.reply('‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–∞—á–∞—Ç–∞');
    }
    
    const game = gameRes.rows[0];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
    const field = placeShipsAutomatically();
    await pool.query(
      `UPDATE games 
       SET player2_field = $1, current_player = $2, status = 'active' 
       WHERE game_id = $3`,
      [field, game.player1_id, gameId]
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
    await ctx.telegram.sendMessage(
      game.player1_id,
      `üéâ ${ctx.from.first_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ! –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, –≤–∞—à —Ö–æ–¥.`
    );
    
    await ctx.reply('üéâ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∏–≥—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞.');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è
    await showPlayerField(ctx, gameId, game.player1_id);
    await showPlayerField(ctx, gameId, ctx.from.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É
    await ctx.telegram.sendMessage(
      game.player1_id,
      '–í–∞—à —Ö–æ–¥:',
      generateShootingKeyboard()
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ accept:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∏–≥—Ä—ã');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞
bot.action(/^shoot_/, async (ctx) => {
  const coord = ctx.match[0].replace('shoot_', '');
  const letter = coord[0];
  const x = parseInt(coord.slice(1)) - 1;
  const y = letter.charCodeAt(0) - 'A'.charCodeAt(0);
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –∏–≥—Ä–æ–∫–∞
    const gameRes = await pool.query(
      `SELECT * FROM games 
       WHERE (player1_id = $1 OR player2_id = $1) 
       AND status = 'active' 
       AND current_player = $1`,
      [ctx.from.id]
    );
    
    if (gameRes.rows.length === 0) {
      return ctx.answerCbQuery('‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –∏–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    const game = gameRes.rows[0];
    const isPlayer1 = game.player1_id === ctx.from.id;
    const opponentId = isPlayer1 ? game.player2_id : game.player1_id;
    const opponentField = isPlayer1 ? game.player2_field : game.player1_field;
    const playerShots = isPlayer1 ? game.player1_shots : game.player2_shots;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å—é–¥–∞
    if (playerShots[coord]) {
      return ctx.answerCbQuery('‚ùå –í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ —Å—é–¥–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ
    const isHit = opponentField[y][x] === 1;
    const newShots = { ...playerShots, [coord]: isHit ? 'hit' : 'miss' };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
    await pool.query(
      `UPDATE games 
       SET ${isPlayer1 ? 'player1_shots' : 'player2_shots'} = $1,
           current_player = $2
       WHERE game_id = $3`,
      [newShots, opponentId, game.game_id]
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    const isWin = checkWinCondition(newShots, opponentField);
    
    if (isWin) {
      await endGame(ctx, game.game_id, ctx.from.id);
      return;
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
    await ctx.answerCbQuery(isHit ? 'üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ!' : 'üåä –ú–∏–º–æ!');
    await ctx.editMessageReplyMarkup(generateShootingKeyboard(newShots).reply_markup);
    
    // –ï—Å–ª–∏ –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º - –µ–≥–æ —Ö–æ–¥
    if (opponentId === 0) {
      await botTurn(ctx, game.game_id);
    } else {
      await ctx.telegram.sendMessage(
        opponentId,
        `${ctx.from.first_name} —Å–¥–µ–ª–∞–ª —Ö–æ–¥ –≤ ${coord} - ${isHit ? 'üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ!' : 'üåä –ú–∏–º–æ!'}\n–í–∞—à —Ö–æ–¥:`,
        generateShootingKeyboard(isPlayer1 ? game.player2_shots : game.player1_shots)
      );
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ shoot:', err);
    ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –•–æ–¥ –±–æ—Ç–∞
async function botTurn(ctx, gameId) {
  try {
    const gameRes = await pool.query(
      'SELECT * FROM games WHERE game_id = $1',
      [gameId]
    );
    
    if (gameRes.rows.length === 0) return;
    const game = gameRes.rows[0];
    
    // –ü—Ä–æ—Å—Ç–æ–π –ò–ò –±–æ—Ç–∞
    const shots = game.player2_shots || {};
    const field = game.player1_field;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É
    let x, y, coord;
    const letters = ['A','B','C','D','E','F','G','H','I','J'];
    
    do {
      x = Math.floor(Math.random() * 10);
      y = Math.floor(Math.random() * 10);
      coord = `${letters[y]}${x + 1}`;
    } while (shots[coord]);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ
    const isHit = field[y][x] === 1;
    const newShots = { ...shots, [coord]: isHit ? 'hit' : 'miss' };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
    await pool.query(
      `UPDATE games 
       SET player2_shots = $1,
           current_player = $2
       WHERE game_id = $3`,
      [newShots, game.player1_id, gameId]
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    const isWin = checkWinCondition(newShots, field);
    
    if (isWin) {
      await endGame(ctx, gameId, 0); // –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª
      return;
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    await ctx.telegram.sendMessage(
      game.player1_id,
      `ü§ñ –ë–æ—Ç —Å–¥–µ–ª–∞–ª —Ö–æ–¥ –≤ ${coord} - ${isHit ? 'üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ!' : 'üåä –ú–∏–º–æ!'}\n–í–∞—à —Ö–æ–¥:`,
      generateShootingKeyboard(game.player1_shots)
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ botTurn:', err);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
function checkWinCondition(shots, field) {
  let hits = 0;
  let ships = 0;
  
  // –°—á–∏—Ç–∞–µ–º –≤—Å–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
  for (const coord in shots) {
    if (shots[coord] === 'hit') hits++;
  }
  
  // –°—á–∏—Ç–∞–µ–º –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏
  for (let y = 0; y < 10; y++) {
    for (let x = 0; x < 10; x++) {
      if (field[y][x] === 1) ships++;
    }
  }
  
  return hits === ships;
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
async function endGame(ctx, gameId, winnerId) {
  try {
    const gameRes = await pool.query(
      'SELECT * FROM games WHERE game_id = $1',
      [gameId]
    );
    
    if (gameRes.rows.length === 0) return;
    const game = gameRes.rows[0];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    await pool.query(
      'UPDATE games SET status = $1 WHERE game_id = $2',
      ['finished', gameId]
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
    if (winnerId === 0) {
      await ctx.telegram.sendMessage(
        game.player1_id,
        'üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª.'
      );
    } else {
      const winnerName = winnerId === game.player1_id 
        ? game.player1_name 
        : game.player2_name;
      
      if (game.player2_id !== 0) {
        await ctx.telegram.sendMessage(
          winnerId === game.player1_id ? game.player2_id : game.player1_id,
          `üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! ${winnerName} –ø–æ–±–µ–¥–∏–ª.`
        );
      }
      
      await ctx.telegram.sendMessage(
        winnerId,
        'üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!'
      );
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ endGame:', err);
  }
}

// –ü–æ–∫–∞–∑ –ø–æ–ª—è –∏–≥—Ä–æ–∫–∞
async function showPlayerField(ctx, gameId, playerId) {
  try {
    const gameRes = await pool.query(
      'SELECT * FROM games WHERE game_id = $1',
      [gameId]
    );
    
    if (gameRes.rows.length === 0) return;
    const game = gameRes.rows[0];
    
    const isPlayer1 = game.player1_id === playerId;
    const field = isPlayer1 ? game.player1_field : game.player2_field;
    const shots = isPlayer1 ? game.player2_shots : game.player1_shots;
    
    let fieldStr = ' 1 2 3 4 5 6 7 8 9 10\n';
    const letters = ['A','B','C','D','E','F','G','H','I','J'];
    
    for (let y = 0; y < 10; y++) {
      fieldStr += letters[y] + ' ';
      for (let x = 0; x < 10; x++) {
        const coord = `${letters[y]}${x + 1}`;
        
        if (shots && shots[coord] === 'hit') {
          fieldStr += 'üí• ';
        } else if (shots && shots[coord] === 'miss') {
          fieldStr += 'üåä ';
        } else if (field[y][x] === 1) {
          fieldStr += 'üö¢ ';
        } else {
          fieldStr += '‚¨ú ';
        }
      }
      fieldStr += '\n';
    }
    
    await ctx.telegram.sendMessage(
      playerId,
      `<pre>${fieldStr}</pre>`,
      { parse_mode: 'HTML' }
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ showPlayerField:', err);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–∞—á–∏
bot.action('surrender', async (ctx) => {
  try {
    const gameRes = await pool.query(
      `SELECT * FROM games 
       WHERE (player1_id = $1 OR player2_id = $1) 
       AND status = 'active'`,
      [ctx.from.id]
    );
    
    if (gameRes.rows.length === 0) {
      return ctx.answerCbQuery('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã');
    }
    
    const game = gameRes.rows[0];
    const opponentId = game.player1_id === ctx.from.id ? game.player2_id : game.player1_id;
    
    await endGame(ctx, game.game_id, opponentId);
    await ctx.answerCbQuery('–í—ã —Å–¥–∞–ª–∏—Å—å');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ surrender:', err);
    ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.use(express.json());
app.use(bot.webhookCallback('/webhook'));

app.get('/', (req, res) => {
  res.send('–ú–æ—Ä—Å–∫–æ–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  try {
    await initDB();
    console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
  }
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
