const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WEBHOOK_PATH = '/tg-webhook';
const DOMAIN = process.env.RENDER_EXTERNAL_URL || process.env.DOMAIN;
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = `https://${DOMAIN.replace(/^https?:\/\//, '')}${WEBHOOK_PATH}`;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_keyboards (
        user_id BIGINT PRIMARY KEY,
        buttons TEXT[] NOT NULL DEFAULT '{}'
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS chat_keyboards (
        chat_id BIGINT PRIMARY KEY,
        buttons TEXT[] NOT NULL DEFAULT '{}'
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS reminders (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        chat_id BIGINT NOT NULL,
        message_id BIGINT,
        text TEXT NOT NULL,
        end_time BIGINT NOT NULL,
        unit TEXT NOT NULL
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –≥–æ—Ç–æ–≤—ã');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', err);
  }
})();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const activeKeyboards = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createKeyboard(buttons) {
  const keyboard = [];
  const buttonsPerRow = Math.min(3, buttons.length);
  
  for (let i = 0; i < buttons.length; i += buttonsPerRow) {
    keyboard.push(buttons.slice(i, i + buttonsPerRow).map(text => Markup.button.text(text)));
  }

  return Markup.keyboard(keyboard)
    .resize()
    .persistent();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–æ–≤
bot.hears(/^\/(\d+)([—Åc–ºm—áh–¥d])\s(.+)$/i, async (ctx) => {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const messageId = ctx.message.message_id;
  const [, amount, unit, text] = ctx.match;
  
  const unitMap = { '—Å':'—Å', 'c':'—Å', '–º':'–º', 'm':'–º', '—á':'—á', 'h':'—á', '–¥':'–¥', 'd':'–¥' };
  const cleanUnit = unitMap[unit.toLowerCase()];

  if (!cleanUnit) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /5—Å, /10–º, /1—á, /2–¥');
  }

  const ms = {
    '—Å': amount * 1000,
    '–º': amount * 60 * 1000,
    '—á': amount * 60 * 60 * 1000,
    '–¥': amount * 24 * 60 * 60 * 1000
  }[cleanUnit];

  const endTime = Date.now() + ms;

  try {
    await pool.query(
      `INSERT INTO reminders (user_id, chat_id, message_id, text, end_time, unit) 
       VALUES ($1, $2, $3, $4, $5, $6)`,
      [userId, chatId, messageId, text, endTime, cleanUnit]
    );

    setTimeout(async () => {
      try {
        const userTag = ctx.from.username 
          ? `@${ctx.from.username}` 
          : `[${ctx.from.first_name}](tg://user?id=${ctx.from.id})`;
        
        await ctx.telegram.sendMessage(
          chatId, 
          `üîî ${userTag}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${text}`,
          { 
            reply_to_message_id: messageId,
            parse_mode: 'Markdown'
          }
        );
        await pool.query(
          'DELETE FROM reminders WHERE user_id = $1 AND chat_id = $2 AND message_id = $3',
          [userId, chatId, messageId]
        );
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', err);
      }
    }, ms);

    ctx.reply(`‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ${amount}${cleanUnit}: "${text}"`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', err);
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /timer (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
bot.command('timer', async (ctx) => {
  try {
    const reminders = await pool.query(
      `SELECT text, unit, 
       (end_time - (EXTRACT(EPOCH FROM NOW()) * 1000)::bigint as ms_left
       FROM reminders 
       WHERE user_id = $1 AND end_time > EXTRACT(EPOCH FROM NOW()) * 1000`,
      [ctx.from.id]
    );
    
    if (reminders.rows.length === 0) {
      return ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è≥');
    }
    
    const list = reminders.rows.map(r => 
      `‚è± ${r.text} (–æ—Å—Ç–∞–ª–æ—Å—å: ${Math.ceil(r.ms_left/1000)}${r.unit})`
    ).join('\n');
    
    await ctx.reply(`üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n${list}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /timer:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const keyboardCommands = {
  start: async (ctx) => {
    await ctx.replyWithHTML(`üëã <b>–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥`);
  },
  
  help: async (ctx) => {
    await ctx.replyWithHTML(`
<b>üìã –ö–æ–º–∞–Ω–¥—ã:</b>
/set –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/see –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
/open - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/stop - —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/5—Å —Ç–µ–∫—Å—Ç - –Ω–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
/timer - –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    `);
  },
  
  set: async (ctx) => {
    const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
    if (buttons.length === 0) throw new Error('–£–∫–∞–∂–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é');
    
    await pool.query(
      `INSERT INTO user_keyboards (user_id, buttons) VALUES ($1, $2)
       ON CONFLICT (user_id) DO UPDATE SET buttons = $2`,
      [ctx.from.id, buttons]
    );
    await ctx.reply('‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', createKeyboard(buttons));
  },
  
  see: async (ctx) => {
    const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
    if (buttons.length === 0) throw new Error('–£–∫–∞–∂–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é');
    
    activeKeyboards.set(ctx.from.id, buttons);
    await ctx.reply('‚åõ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', createKeyboard(buttons));
  },
  
  open: async (ctx) => {
    if (activeKeyboards.has(ctx.from.id)) {
      return ctx.reply('–í–∞—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', createKeyboard(activeKeyboards.get(ctx.from.id)));
    }
    
    const res = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [ctx.from.id]);
    if (res.rows.length > 0) {
      return ctx.reply('–í–∞—à–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', createKeyboard(res.rows[0].buttons));
    }
    
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
  },
  
  stop: async (ctx) => {
    activeKeyboards.delete(ctx.from.id);
    await ctx.reply('üóë –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', Markup.removeKeyboard());
  }
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
Object.keys(keyboardCommands).forEach(command => {
  bot.command(command, async (ctx) => {
    try {
      await keyboardCommands[command](ctx);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /${command}:`, err);
      await ctx.reply(`‚ùå ${err.message}`);
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –º–æ–ª—á–∞—â–∏–π)
bot.on('text', async (ctx) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (ctx.message.text.startsWith('/')) return;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if (activeKeyboards.has(ctx.from.id)) {
      const buttons = activeKeyboards.get(ctx.from.id);
      if (buttons.includes(ctx.message.text)) {
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ
        return;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const res = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [ctx.from.id]);
    if (res.rows.length > 0 && res.rows[0].buttons.includes(ctx.message.text)) {
      // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ
      return;
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏:', err);
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
  bot.handleUpdate(req.body, res);
});

app.get('/', (req, res) => {
  res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.deleteWebhook();
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:', err);
  }
});
