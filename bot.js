const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
const WEBHOOK_PATH = '/tg-webhook';
const DOMAIN = process.env.RENDER_EXTERNAL_URL || 'your-render-service.onrender.com';
const WEBHOOK_URL = `https://${DOMAIN.replace(/^https?:\/\//, '')}${WEBHOOK_PATH}`;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
(async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS user_keyboards (
      user_id BIGINT PRIMARY KEY,
      buttons TEXT[] NOT NULL DEFAULT '{}'
    )
  `);
  await pool.query(`
    CREATE TABLE IF NOT EXISTS chat_keyboards (
      chat_id BIGINT PRIMARY KEY,
      buttons TEXT[] NOT NULL DEFAULT '{}'
    )
  `);
  await pool.query(`
    CREATE TABLE IF NOT EXISTS reminders (
      id SERIAL PRIMARY KEY,
      user_id BIGINT NOT NULL,
      username TEXT,
      text TEXT NOT NULL,
      end_time BIGINT NOT NULL,
      unit TEXT NOT NULL
    )
  `);
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –≥–æ—Ç–æ–≤—ã');
})();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const activeKeyboards = new Map();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
  ctx.replyWithHTML(`
üëã <b>–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (/set)
- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (/5—Å, /10–º –∏ —Ç.–¥.)
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —á–∞—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/help</code> –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00
  `);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
  ctx.replyWithHTML(`
<b>üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>

<b>–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:</b>
/set –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/see –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
/open - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/stop - —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/del all - —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏
/del –ö–Ω–æ–ø–∫–∞ - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É
/cfg –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–∞—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>
/5—Å –¢–µ–∫—Å—Ç - –Ω–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
/10–º –¢–µ–∫—Å—Ç - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
/1—á –¢–µ–∫—Å—Ç - —á–µ—Ä–µ–∑ 1 —á–∞—Å
/2–¥ –¢–µ–∫—Å—Ç - —á–µ—Ä–µ–∑ 2 –¥–Ω—è
/—Ç–∞–π–º–µ—Ä—ã - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00
  `);
});

// –ö–æ–º–∞–Ω–¥–∞ /del
bot.command('del', async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length === 0) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /del all –∏–ª–∏ /del –ö–Ω–æ–ø–∫–∞');
  }

  const userId = ctx.from.id;
  const toDelete = args.join(' ').trim();

  try {
    const result = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [userId]);
    
    if (result.rows.length === 0 || result.rows[0].buttons.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫');
    }

    let buttons = result.rows[0].buttons;
    
    if (toDelete.toLowerCase() === 'all') {
      buttons = [];
    } else {
      buttons = buttons.filter(btn => btn !== toDelete);
      
      if (buttons.length === result.rows[0].buttons.length) {
        return ctx.reply('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    }

    await pool.query(
      'UPDATE user_keyboards SET buttons = $1 WHERE user_id = $2',
      [buttons, userId]
    );

    ctx.reply(toDelete === 'all' ? '‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã' : `‚úÖ –ö–Ω–æ–ø–∫–∞ "${toDelete}" —É–¥–∞–ª–µ–Ω–∞`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /del:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
  }
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–∞–π–º–µ—Ä—ã, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, 
// –Ω–æ –£–ë–ò–†–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ (bot.on('text')) –ø–æ–ª–Ω–æ—Å—Ç—å—é

// –í–µ–±—Ö—É–∫
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
  bot.handleUpdate(req.body, res).catch(err => {
    console.error('Webhook error:', err);
    res.status(200).end();
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Telegram Bot Status</title>
      <meta charset="UTF-8">
      <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        h1 { color: #0088cc; }
        .status { font-size: 1.2em; margin: 20px 0; }
      </style>
    </head>
    <body>
      <h1>ü§ñ Telegram Bot</h1>
      <div class="status">–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</div>
      <div>Webhook: <code>${WEBHOOK_URL}</code></div>
    </body>
    </html>
  `);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 10000;
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.deleteWebhook();
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:', err);
    process.exit(1);
  }
});
