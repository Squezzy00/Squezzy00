const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const OWNER_ID = 5005387093; // ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
const WEBHOOK_PATH = '/tg-webhook';
const DOMAIN = process.env.RENDER_EXTERNAL_URL || 'your-render-service.onrender.com';
const WEBHOOK_URL = `https://${DOMAIN.replace(/^https?:\/\//, '')}${WEBHOOK_PATH}`;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        universal_id SERIAL,
        is_premium BOOLEAN DEFAULT FALSE,
        is_banned BOOLEAN DEFAULT FALSE,
        is_admin BOOLEAN DEFAULT FALSE
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_keyboards (
        user_id BIGINT PRIMARY KEY,
        buttons TEXT[] NOT NULL DEFAULT '{}'
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS chat_keyboards (
        chat_id BIGINT PRIMARY KEY,
        buttons TEXT[] NOT NULL DEFAULT '{}'
      )
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS reminders (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        username TEXT,
        text TEXT NOT NULL,
        end_time BIGINT NOT NULL,
        unit TEXT NOT NULL
      )
    `);
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É
    await pool.query(`
      INSERT INTO users (user_id, is_admin) 
      VALUES ($1, TRUE) 
      ON CONFLICT (user_id) DO UPDATE SET is_admin = TRUE`,
      [OWNER_ID]
    );
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –≥–æ—Ç–æ–≤—ã');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', err);
    process.exit(1);
  }
})();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const activeKeyboards = new Map();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞
bot.use(async (ctx, next) => {
  if (ctx.from) {
    const user = await pool.query('SELECT is_banned FROM users WHERE user_id = $1', [ctx.from.id]);
    if (user.rows.length > 0 && user.rows[0].is_banned) {
      return ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ');
    }
  }
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    await pool.query(`
      INSERT INTO users (user_id, username) 
      VALUES ($1, $2) 
      ON CONFLICT (user_id) DO UPDATE SET username = $2`,
      [ctx.from.id, ctx.from.username]
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = await pool.query(`
      SELECT universal_id, is_premium, is_admin 
      FROM users 
      WHERE user_id = $1`, 
      [ctx.from.id]
    );
    
    let status = '';
    if (ctx.from.id === OWNER_ID) {
      status = 'üëë –í–ª–∞–¥–µ–ª–µ—Ü';
    } else if (userData.rows[0].is_admin) {
      status = 'üõ° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    }
    
    status += userData.rows[0].is_premium ? ' üíé –ü—Ä–µ–º–∏—É–º' : '';
    
    ctx.replyWithHTML(`
üëã <b>–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!</b>

üìå –í–∞—à ID –≤ –±–æ—Ç–µ: <code>${userData.rows[0].universal_id}</code>
${status ? `üåü –°—Ç–∞—Ç—É—Å: ${status}` : ''}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/help</code> –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00
    `);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /start:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
  ctx.replyWithHTML(`
<b>üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>
/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/profile ID - –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ø—Ä–µ–º–∏—É–º+)
/timer - –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

<b>–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:</b>
/set –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/see –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
/open - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/stop - —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

<b>–ü—Ä–µ–º–∏—É–º:</b>
/tagall N —Ç–µ–∫—Å—Ç - —Ç–µ–≥–Ω—É—Ç—å –≤—Å–µ—Ö (–ø—Ä–µ–º–∏—É–º+)

<b>–ê–¥–º–∏–Ω:</b>
/ban ID - –∑–∞–±–∞–Ω–∏—Ç—å
/premium ID - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º

<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b>
/makeadmin ID - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @squezzy00
  `);
});

// –ö–æ–º–∞–Ω–¥–∞ /profile
bot.command('profile', async (ctx) => {
  try {
    let targetId = ctx.from.id;
    const args = ctx.message.text.split(' ');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    if (args.length > 1) {
      const user = await pool.query('SELECT is_premium, is_admin FROM users WHERE user_id = $1', [ctx.from.id]);
      const isPrivileged = user.rows.length > 0 && (user.rows[0].is_premium || user.rows[0].is_admin || ctx.from.id === OWNER_ID);
      
      if (!isPrivileged) {
        return ctx.reply('üö´ –ü—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –≤—ã—à–µ');
      }
      
      targetId = await getUserIdByUniversalId(parseInt(args[1]));
      if (!targetId) return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const user = await pool.query(`
      SELECT universal_id, is_premium, is_admin 
      FROM users 
      WHERE user_id = $1`, 
      [targetId]
    );
    
    if (user.rows.length === 0) return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    const keyboard = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [targetId]);
    
    let status = '';
    if (targetId === OWNER_ID) {
      status = 'üëë –í–ª–∞–¥–µ–ª–µ—Ü';
    } else if (user.rows[0].is_admin) {
      status = 'üõ° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    }
    
    status += user.rows[0].is_premium ? ' üíé –ü—Ä–µ–º–∏—É–º' : '';
    
    ctx.replyWithHTML(`
üìå <b>–ü—Ä–æ—Ñ–∏–ª—å ${targetId === ctx.from.id ? '–≤–∞—à' : '–∏–≥—Ä–æ–∫–∞'}</b>

üÜî ID: <code>${user.rows[0].universal_id}</code>
${status ? `üåü –°—Ç–∞—Ç—É—Å: ${status}` : ''}
‚å®Ô∏è –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: ${keyboard.rows.length > 0 ? keyboard.rows[0].buttons.join(', ') : '–Ω–µ—Ç'}
    `);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /profile:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /ban (–∞–¥–º–∏–Ω+)
bot.command('ban', async (ctx) => {
  if (!(await isAdmin(ctx) || ctx.from.id === OWNER_ID)) return;
  
  const targetId = parseInt(ctx.message.text.split(' ')[1]);
  if (!targetId) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  try {
    await pool.query('UPDATE users SET is_banned = TRUE WHERE universal_id = $1', [targetId]);
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /ban:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /premium (–∞–¥–º–∏–Ω+)
bot.command('premium', async (ctx) => {
  if (!(await isAdmin(ctx) || ctx.from.id === OWNER_ID)) return;
  
  const targetId = parseInt(ctx.message.text.split(' ')[1]);
  if (!targetId) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  try {
    await pool.query('UPDATE users SET is_premium = TRUE WHERE universal_id = $1', [targetId]);
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetId} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–º–∏—É–º`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /premium:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /makeadmin (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
bot.command('makeadmin', async (ctx) => {
  if (ctx.from.id !== OWNER_ID) {
    return ctx.reply('üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞');
  }
  
  const targetId = parseInt(ctx.message.text.split(' ')[1]);
  if (!targetId) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  try {
    await pool.query('UPDATE users SET is_admin = TRUE WHERE universal_id = $1', [targetId]);
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetId} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /makeadmin:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /tagall (–ø—Ä–µ–º–∏—É–º+)
bot.command('tagall', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (–ø—Ä–µ–º–∏—É–º, –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü)
    const user = await pool.query('SELECT is_premium, is_admin FROM users WHERE user_id = $1', [ctx.from.id]);
    const isAllowed = user.rows.length > 0 && 
                     (user.rows[0].is_premium || user.rows[0].is_admin || ctx.from.id === OWNER_ID);
    
    if (!isAllowed) {
      return ctx.reply('üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã—à–µ');
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 2) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /tagall N —Ç–µ–∫—Å—Ç');
    
    const count = parseInt(args[0]);
    const text = args.slice(1).join(' ');

    // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    const chatMembers = await ctx.getChatAdministrators();
    const mentions = [];

    for (let i = 0; i < Math.min(count, chatMembers.length); i++) {
      const member = chatMembers[i].user;
      mentions.push(`@${member.username || member.id} ${text}`);
    }

    ctx.reply(mentions.join('\n'));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /tagall:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–æ–≤
bot.hears(/^\/(\d+)([—Åc–ºm—áh–¥d])\s(.+)$/i, async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username || ctx.from.first_name;
  const [, amount, unit, text] = ctx.match;
  
  const unitMap = { '—Å':'—Å', 'c':'—Å', '–º':'–º', 'm':'–º', '—á':'—á', 'h':'—á', '–¥':'–¥', 'd':'–¥' };
  const cleanUnit = unitMap[unit.toLowerCase()];

  const ms = {
    '—Å': amount * 1000,
    '–º': amount * 60 * 1000,
    '—á': amount * 60 * 60 * 1000,
    '–¥': amount * 24 * 60 * 60 * 1000
  }[cleanUnit];

  const endTime = Date.now() + ms;

  try {
    await pool.query(
      'INSERT INTO reminders (user_id, username, text, end_time, unit) VALUES ($1, $2, $3, $4, $5)',
      [userId, username, text, endTime, cleanUnit]
    );

    setTimeout(async () => {
      await ctx.reply(`üîî @${username}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${text}`);
      await pool.query('DELETE FROM reminders WHERE user_id = $1 AND text = $2 AND unit = $3', 
        [userId, text, cleanUnit]);
    }, ms);

    ctx.reply(`‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ${amount}${cleanUnit}: "${text}"`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ë–î:', err);
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /timer
bot.command('timer', async (ctx) => {
  const userId = ctx.from.id;
  
  try {
    const res = await pool.query(
      `SELECT text, unit, 
       (end_time - EXTRACT(EPOCH FROM NOW())*1000) AS ms_left
       FROM reminders 
       WHERE user_id = $1 AND end_time > EXTRACT(EPOCH FROM NOW())*1000`,
      [userId]
    );

    if (res.rows.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è≥');
    }

    const timerList = res.rows.map(row => {
      const timeLeft = Math.ceil(row.ms_left / 1000);
      const units = { '—Å': '—Å–µ–∫', '–º': '–º–∏–Ω', '—á': '—á–∞—Å', '–¥': '–¥–Ω' };
      return `‚è± ${row.text} (–æ—Å—Ç–∞–ª–æ—Å—å: ${timeLeft}${units[row.unit] || '?'})`;
    }).join('\n');

    ctx.reply(`üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n${timerList}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ë–î:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üò¢');
  }
});

// –í–µ–±—Ö—É–∫
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
  bot.handleUpdate(req.body, res).catch(err => {
    console.error('Webhook error:', err);
    res.status(200).end();
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Telegram Bot Status</title>
      <meta charset="UTF-8">
      <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        h1 { color: #0088cc; }
        .status { font-size: 1.2em; margin: 20px 0; }
      </style>
    </head>
    <body>
      <h1>ü§ñ Telegram Bot</h1>
      <div class="status">–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</div>
      <div>Webhook: <code>${WEBHOOK_URL}</code></div>
    </body>
    </html>
  `);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 10000;
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.deleteWebhook();
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:', err);
    process.exit(1);
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function isAdmin(ctx) {
  try {
    const user = await pool.query('SELECT is_admin FROM users WHERE user_id = $1', [ctx.from.id]);
    return user.rows.length > 0 && user.rows[0].is_admin;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞:', err);
    return false;
  }
}

async function getUserIdByUniversalId(universalId) {
  try {
    const res = await pool.query('SELECT user_id FROM users WHERE universal_id = $1', [universalId]);
    return res.rows.length > 0 ? res.rows[0].user_id : null;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    return null;
  }
               }
