const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');
const express = require('express');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const activeKeyboards = new Map();
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BOT_TOKEN');
  process.exit(1);
}

if (!process.env.DATABASE_URL) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DATABASE_URL');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async function initDB() {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        nickname TEXT,
        universal_id SERIAL,
        is_premium BOOLEAN DEFAULT FALSE,
        is_banned BOOLEAN DEFAULT FALSE,
        is_admin BOOLEAN DEFAULT FALSE,
        banner_file_id TEXT
      );
    `);
    await client.query(`
      CREATE TABLE IF NOT EXISTS user_keyboards (
        user_id BIGINT PRIMARY KEY,
        buttons TEXT[] NOT NULL DEFAULT '{}'
      );
    `);
    await client.query(`
      CREATE TABLE IF NOT EXISTS reminders (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        text TEXT NOT NULL,
        end_time BIGINT NOT NULL
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', err);
    throw err;
  } finally {
    client.release();
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function isAdmin(userId) {
  const res = await pool.query('SELECT is_admin FROM users WHERE user_id = $1', [userId]);
  return res.rows.length > 0 && res.rows[0].is_admin;
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  try {
    await pool.query(`
      INSERT INTO users (user_id, username) 
      VALUES ($1, $2) 
      ON CONFLICT (user_id) DO UPDATE SET username = $2`,
      [ctx.from.id, ctx.from.username]
    );

    ctx.replyWithHTML(`
<b>ü§ñ Telegram-–±–æ—Ç</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä (/set, /see, /open)
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (/timer)
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º (/profile)

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    `);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /start:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /profile
bot.command('profile', async (ctx) => {
  try {
    const user = await pool.query(`
      SELECT universal_id, username, is_premium, is_admin, banner_file_id,
      COALESCE(nickname, username) as display_name
      FROM users WHERE user_id = $1`,
      [ctx.from.id]
    );

    if (user.rows.length === 0) return ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    const profileText = `
<blockquote><b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b></blockquote>

<blockquote><b>‚îÇ –ù–∏–∫:</b> <i>${user.rows[0].display_name || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</i></blockquote>

<blockquote><b>‚îÇ ID:</b> <i>${user.rows[0].universal_id}</i></blockquote>

<blockquote><b>‚îÇ –°—Ç–∞—Ç—É—Å:</b> <i>${user.rows[0].is_admin ? '–ê–¥–º–∏–Ω' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</i></blockquote>

<blockquote><b>‚îÇ –ü—Ä–µ–º–∏—É–º:</b> <i>${user.rows[0].is_premium ? '–î–∞' : '–ù–µ—Ç'}</i></blockquote>
    `;

    if (user.rows[0].banner_file_id) {
      await ctx.replyWithPhoto(user.rows[0].banner_file_id, {
        caption: profileText,
        parse_mode: 'HTML'
      });
    } else {
      await ctx.replyWithHTML(profileText);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /profile:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /setnick
bot.command('setnick', async (ctx) => {
  const nickname = ctx.message.text.split(' ').slice(1).join(' ');
  if (!nickname) return ctx.reply('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setnick –í–∞—à–ù–∏–∫–Ω–µ–π–º');

  try {
    await pool.query('UPDATE users SET nickname = $1 WHERE user_id = $2', [nickname, ctx.from.id]);
    ctx.reply(`‚úÖ –ù–∏–∫–Ω–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${nickname}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /setnick:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /setbanner
bot.command('setbanner', (ctx) => {
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞');
});

bot.on('photo', async (ctx) => {
  if (ctx.message.reply_to_message?.text === '/setbanner') {
    try {
      const fileId = ctx.message.photo[0].file_id;
      await pool.query('UPDATE users SET banner_file_id = $1 WHERE user_id = $2', [fileId, ctx.from.id]);
      ctx.reply('‚úÖ –ë–∞–Ω–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞:', err);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞');
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /ban
bot.command('ban', async (ctx) => {
  if (!await isAdmin(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  try {
    await pool.query('UPDATE users SET is_banned = TRUE WHERE universal_id = $1', [args[1]]);
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[1]} –∑–∞–±–∞–Ω–µ–Ω`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /ban:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /unban
bot.command('unban', async (ctx) => {
  if (!await isAdmin(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  try {
    await pool.query('UPDATE users SET is_banned = FALSE WHERE universal_id = $1', [args[1]]);
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[1]} —Ä–∞–∑–±–∞–Ω–µ–Ω`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /unban:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /premium
bot.command('premium', async (ctx) => {
  if (!await isAdmin(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /premium ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  try {
    await pool.query('UPDATE users SET is_premium = TRUE WHERE universal_id = $1', [args[1]]);
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[1]} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–º–∏—É–º`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /premium:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /tagall
bot.command('tagall', async (ctx) => {
  if (ctx.chat.type === 'private') return ctx.reply('üö´ –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤!');
  if (!await isAdmin(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /tagall N —Å–æ–æ–±—â–µ–Ω–∏–µ');

  const perMessage = Math.min(50, Math.max(1, parseInt(args[0]) || 5));
  const message = args.slice(1).join(' ');

  try {
    const members = await ctx.getChatAdministrators();
    const mentions = members
      .filter(m => m.user.id !== ctx.botInfo.id)
      .map(m => `@${m.user.username}`);

    for (let i = 0; i < mentions.length; i += perMessage) {
      const batch = mentions.slice(i, i + perMessage).join(' ');
      await ctx.reply(`${message}\n${batch}`);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /tagall:', err);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ø–æ–º—è–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /set
bot.command('set', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  if (!buttons.length) return ctx.reply('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2');

  try {
    await pool.query(`
      INSERT INTO user_keyboards (user_id, buttons) 
      VALUES ($1, $2) 
      ON CONFLICT (user_id) DO UPDATE SET buttons = $2`,
      [ctx.from.id, buttons]
    );
    ctx.reply('‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', Markup.keyboard(buttons).resize());
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /set:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /see
bot.command('see', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  if (!buttons.length) return ctx.reply('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /see –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2');

  activeKeyboards.set(ctx.from.id, buttons);
  ctx.reply('‚åõ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', Markup.keyboard(buttons).oneTime());
});

// –ö–æ–º–∞–Ω–¥–∞ /open
bot.command('open', async (ctx) => {
  try {
    if (activeKeyboards.has(ctx.from.id)) {
      const buttons = activeKeyboards.get(ctx.from.id);
      return ctx.reply('–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', Markup.keyboard(buttons).resize());
    }

    const userKb = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [ctx.from.id]);
    if (userKb.rows.length) {
      return ctx.reply('–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', Markup.keyboard(userKb.rows[0].buttons).resize());
    }

    ctx.reply('‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /open:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.command('stop', (ctx) => {
  activeKeyboards.delete(ctx.from.id);
  ctx.reply('üóë –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', Markup.removeKeyboard());
});

// –ö–æ–º–∞–Ω–¥–∞ /timer
bot.command('timer', async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /timer –º–∏–Ω—É—Ç—ã —Ç–µ–∫—Å—Ç');

  const minutes = parseInt(args[0]);
  if (isNaN(minutes)) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç');

  const text = args.slice(1).join(' ');
  const endTime = Date.now() + minutes * 60000;

  try {
    await pool.query(`
      INSERT INTO reminders (user_id, text, end_time)
      VALUES ($1, $2, $3)`,
      [ctx.from.id, text, Math.floor(endTime / 1000)]
    );
    ctx.reply(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${new Date(endTime).toLocaleTimeString()}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /timer:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
setInterval(async () => {
  try {
    const now = Math.floor(Date.now() / 1000);
    const reminders = await pool.query('SELECT * FROM reminders WHERE end_time <= $1', [now]);
    
    for (const rem of reminders.rows) {
      await bot.telegram.sendMessage(rem.user_id, `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${rem.text}`);
      await pool.query('DELETE FROM reminders WHERE id = $1', [rem.id]);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err);
  }
}, 60000);

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
  ctx.replyWithHTML(`
<b>üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:</b>

<u>–û—Å–Ω–æ–≤–Ω—ã–µ:</u>
/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/setnick [–Ω–∏–∫] - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫
/setbanner - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è

<u>–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:</u>
/set –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/see –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2 - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
/open - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/stop - —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

<u>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</u>
/timer –º–∏–Ω—É—Ç—ã —Ç–µ–∫—Å—Ç - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

<u>–î–ª—è –∞–¥–º–∏–Ω–æ–≤:</u>
/ban ID - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban ID - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/premium ID - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º
/tagall N —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–ø–æ–º—è–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  `);
});

// Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞
bot.use(async (ctx, next) => {
  if (ctx.from) {
    try {
      const user = await pool.query('SELECT is_banned FROM users WHERE user_id = $1', [ctx.from.id]);
      if (user.rows.length > 0 && user.rows[0].is_banned) {
        return ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞:', err);
    }
  }
  return next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
const setupWebhook = async () => {
  if (!process.env.WEBHOOK_URL) {
    console.log('‚ÑπÔ∏è WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—é polling');
    return bot.launch();
  }

  const webhookUrl = `${process.env.WEBHOOK_URL}/webhook`;
  console.log(`‚åõ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: ${webhookUrl}`);

  try {
    await bot.telegram.setWebhook(webhookUrl);
    console.log('‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:', err);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.use(express.json());
app.use(bot.webhookCallback('/webhook'));

app.get('/', (req, res) => {
  res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  try {
    await initDB();
    await setupWebhook();
    console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
  }
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
