const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');
const express = require('express');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const PORT = process.env.PORT || 3000;

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è
function generateEmptyField() {
  return Array(10).fill().map(() => Array(10).fill(0));
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π
function placeShipsAutomatically() {
  const sizes = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];
  const field = generateEmptyField();
  
  for (const size of sizes) {
    let placed = false;
    while (!placed) {
      const vertical = Math.random() > 0.5;
      const x = Math.floor(Math.random() * (vertical ? 10 : 10 - size));
      const y = Math.floor(Math.random() * (vertical ? 10 - size : 10));
      
      let canPlace = true;
      for (let i = 0; i < size; i++) {
        const checkX = vertical ? x : x + i;
        const checkY = vertical ? y + i : y;
        
        for (let dx = -1; dx <= 1; dx++) {
          for (let dy = -1; dy <= 1; dy++) {
            const nx = checkX + dx;
            const ny = checkY + dy;
            if (nx >= 0 && nx < 10 && ny >= 0 && ny < 10 && field[ny][nx] === 1) {
              canPlace = false;
            }
          }
        }
      }
      
      if (canPlace) {
        for (let i = 0; i < size; i++) {
          if (vertical) {
            field[y + i][x] = 1;
          } else {
            field[y][x + i] = 1;
          }
        }
        placed = true;
      }
    }
  }
  
  return field;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã
function generateShootingKeyboard(shots = {}) {
  const letters = ['A','B','C','D','E','F','G','H','I','J'];
  const keyboard = [];
  
  for (let y = 0; y < 10; y++) {
    const row = [];
    for (let x = 1; x <= 10; x++) {
      const coord = `${letters[y]}${x}`;
      const shot = shots[coord];
      
      let emoji = '‚¨ú';
      if (shot === 'hit') emoji = 'üí•';
      if (shot === 'miss') emoji = 'üåä';
      
      row.push(Markup.button.callback(emoji, `shoot_${coord}`));
    }
    keyboard.push(row);
  }
  
  keyboard.push([Markup.button.callback('üè≥Ô∏è –°–¥–∞—Ç—å—Å—è', 'surrender')]);
  return Markup.inlineKeyboard(keyboard);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function initDB() {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      );
    `);
    
    await client.query(`
      CREATE TABLE IF NOT EXISTS games (
        game_id SERIAL PRIMARY KEY,
        player1_id BIGINT NOT NULL,
        player2_id BIGINT,
        current_player BIGINT,
        player1_field JSONB NOT NULL,
        player2_field JSONB,
        player1_shots JSONB DEFAULT '{}',
        player2_shots JSONB DEFAULT '{}',
        status TEXT NOT NULL DEFAULT 'waiting',
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );
    `);
    
    await client.query('COMMIT');
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', err.stack);
    throw err;
  } finally {
    client.release();
  }
}

// –ö–æ–º–∞–Ω–¥–∞ start_battle —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
bot.command('start_battle', async (ctx) => {
  try {
    console.log(`[start_battle] –ó–∞–ø—É—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    try {
      await pool.query('SELECT 1');
    } catch (dbErr) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', dbErr);
      throw new Error('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRes = await pool.query(
      `INSERT INTO users (user_id, username, first_name, last_name)
       VALUES ($1, $2, $3, $4)
       ON CONFLICT (user_id) DO UPDATE
       SET username = EXCLUDED.username,
           first_name = EXCLUDED.first_name,
           last_name = EXCLUDED.last_name
       RETURNING user_id`,
      [ctx.from.id, ctx.from.username, ctx.from.first_name, ctx.from.last_name]
    );
    
    if (!userRes.rows.length) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    await ctx.reply(
      'üö¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–æ—Ä—Å–∫–æ–π –±–æ–π!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:',
      Markup.inlineKeyboard([
        [
          Markup.button.callback('ü§ñ –ü—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞', 'play_vs_bot'),
          Markup.button.callback('üë• –° –¥—Ä—É–≥–æ–º', 'play_vs_friend')
        ],
        [Markup.button.callback('üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', 'show_rules')]
      ])
    );
    
    console.log(`[start_battle] –£—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
  } catch (err) {
    console.error(`[start_battle] –û—à–∏–±–∫–∞ –¥–ª—è ${ctx.from.id}:`, err.stack);
    
    let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã\n\n';
    errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
    
    try {
      await ctx.reply(errorMessage);
    } catch (sendErr) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendErr);
    }
  }
});

// –ü–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã
bot.action('show_rules', async (ctx) => {
  try {
    await ctx.editMessageText(
      `üìñ –ü—Ä–∞–≤–∏–ª–∞ –ú–æ—Ä—Å–∫–æ–≥–æ –±–æ—è:\n\n` +
      `1. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –∏–º–µ–µ—Ç –ø–æ–ª–µ 10√ó10 —Å –∫–æ—Ä–∞–±–ª—è–º–∏\n` +
      `2. –ö–æ—Ä–∞–±–ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n` +
      `3. –ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –¥–µ–ª–∞—é—Ç –≤—ã—Å—Ç—Ä–µ–ª—ã\n` +
      `4. –¶–µ–ª—å - –ø–µ—Ä–≤—ã–º –ø–æ—Ç–æ–ø–∏—Ç—å –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n\n` +
      `–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:\n` +
      `üö¢ - –≤–∞—à –∫–æ—Ä–∞–±–ª—å (–≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º)\n` +
      `üí• - –ø–æ–ø–∞–¥–∞–Ω–∏–µ\n` +
      `üåä - –ø—Ä–æ–º–∞—Ö\n` +
      `‚¨ú - –µ—â–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:`,
      {
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('ü§ñ –ü—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞', 'play_vs_bot'),
            Markup.button.callback('üë• –° –¥—Ä—É–≥–æ–º', 'play_vs_friend')
          ]
        ]).reply_markup
      }
    );
    await ctx.answerCbQuery();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ show_rules:', err);
    ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞');
  }
});

// –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞
bot.action('play_vs_bot', async (ctx) => {
  try {
    const field = placeShipsAutomatically();
    const botField = placeShipsAutomatically();
    
    const gameRes = await pool.query(
      `INSERT INTO games (player1_id, player2_id, current_player, player1_field, player2_field, status)
       VALUES ($1, 0, $1, $2, $3, 'active')
       RETURNING game_id`,
      [ctx.from.id, field, botField]
    );
    
    await ctx.editMessageText('üéÆ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à —Ö–æ–¥:');
    await showPlayerField(ctx, gameRes.rows[0].game_id, ctx.from.id);
    await ctx.reply('–°—Ç—Ä–µ–ª—è–π—Ç–µ –ø–æ –ø–æ–ª—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:', generateShootingKeyboard());
    await ctx.answerCbQuery();
    
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ play_vs_bot:', err);
    ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
  }
});

// –ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º
bot.action('play_vs_friend', async (ctx) => {
  try {
    await ctx.editMessageText(
      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /play_with @username –∏–ª–∏ /play_with ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_menu')]
      ])
    );
    await ctx.answerCbQuery();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ play_vs_friend:', err);
    ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∂–∏–º–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.action('back_to_menu', async (ctx) => {
  try {
    await ctx.editMessageText(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:',
      Markup.inlineKeyboard([
        [
          Markup.button.callback('ü§ñ –ü—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞', 'play_vs_bot'),
          Markup.button.callback('üë• –° –¥—Ä—É–≥–æ–º', 'play_vs_friend')
        ],
        [Markup.button.callback('üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', 'show_rules')]
      ])
    );
    await ctx.answerCbQuery();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ back_to_menu:', err);
  }
});

// –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞
bot.command('play_with', async (ctx) => {
  const targetInput = ctx.message.text.split(' ')[1];
  if (!targetInput) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /play_with @username –∏–ª–∏ /play_with ID');
  }

  try {
    let targetId = targetInput.startsWith('@') ? targetInput.slice(1) : parseInt(targetInput);
    
    const userRes = await pool.query(
      'SELECT user_id, first_name FROM users WHERE user_id = $1 OR username = $2',
      [targetId, targetInput]
    );
    
    if (userRes.rows.length === 0) {
      return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.');
    }
    
    targetId = userRes.rows[0].user_id;
    const targetName = userRes.rows[0].first_name;
    
    if (targetId === ctx.from.id) {
      return ctx.reply('‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!');
    }
    
    const field = placeShipsAutomatically();
    const gameRes = await pool.query(
      `INSERT INTO games (player1_id, player2_id, player1_field, status)
       VALUES ($1, $2, $3, 'waiting')
       RETURNING game_id`,
      [ctx.from.id, targetId, field]
    );
    
    await ctx.telegram.sendMessage(
      targetId,
      `üéÆ ${ctx.from.first_name} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤ –ú–æ—Ä—Å–∫–æ–π –±–æ–π!`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `accept_${gameRes.rows[0].game_id}`)],
        [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `decline_${gameRes.rows[0].game_id}`)]
      ])
    );
    
    await ctx.reply(`‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${targetName}! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...`);
    
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ play_with:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
  }
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤, —Ö–æ–¥ –±–æ—Ç–∞ –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// ...

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let dbInitialized = false;
    for (let i = 1; i <= 3; i++) {
      try {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î (${i}/3)...`);
        await initDB();
        dbInitialized = true;
        break;
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${i}):`, err);
        if (i < 3) await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
    
    if (!dbInitialized) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫');
    }
    
    app.use(express.json());
    app.use(bot.webhookCallback('/webhook'));
    
    app.get('/', (req, res) => {
      res.status(200).json({
        status: 'running',
        game: '–ú–æ—Ä—Å–∫–æ–π –±–æ—Ç',
        version: '1.0.0'
      });
    });
    
    const server = app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });
    
    process.once('SIGINT', () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT. –û—Å—Ç–∞–Ω–æ–≤–∫–∞...');
      server.close();
      bot.stop('SIGINT');
    });
    
    process.once('SIGTERM', () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM. –û—Å—Ç–∞–Ω–æ–≤–∫–∞...');
      server.close();
      bot.stop('SIGTERM');
    });
    
  } catch (err) {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', err);
    process.exit(1);
  }
}

startServer();
