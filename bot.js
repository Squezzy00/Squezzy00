require('dotenv').config();
const { Telegraf } = require('telegraf');
const { Low, JSONFile } = require('lowdb');
const fs = require('fs');
const path = require('path');
const _ = require('lodash');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î
const dbPath = path.join(__dirname, 'db.json');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ë–î –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (!fs.existsSync(dbPath)) {
  fs.writeFileSync(dbPath, '{}');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
const adapter = new JSONFile(dbPath);
const db = new Low(adapter);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
async function initDB() {
  try {
    await db.read();
    db.data ||= { 
      users: {},
      stats: {
        totalTimers: 0,
        activeTimers: 0
      }
    };
    await db.write();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', err);
    // –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—É—é –ë–î –ø—Ä–∏ –æ—à–∏–±–∫–µ
    db.data = { 
      users: {},
      stats: {
        totalTimers: 0,
        activeTimers: 0
      }
    };
    await db.write();
  }
}

const bot = new Telegraf(process.env.BOT_TOKEN);
const OWNER_ID = parseInt(process.env.OWNER_ID);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
function escapeMarkdown(text) {
  if (!text) return '';
  return text.toString()
    .replace(/\_/g, '\\_')
    .replace(/\*/g, '\\*')
    .replace(/\[/g, '\\[')
    .replace(/\]/g, '\\]')
    .replace(/\(/g, '\\(')
    .replace(/\)/g, '\\)')
    .replace(/\~/g, '\\~')
    .replace(/\`/g, '\\`')
    .replace(/\>/g, '\\>')
    .replace(/\#/g, '\\#')
    .replace(/\+/g, '\\+')
    .replace(/\-/g, '\\-')
    .replace(/\=/g, '\\=')
    .replace(/\|/g, '\\|')
    .replace(/\{/g, '\\{')
    .replace(/\}/g, '\\}')
    .replace(/\./g, '\\.')
    .replace(/\!/g, '\\!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function getTimeString(amount, unit) {
  const units = {
    '—Å': ['—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'],
    '–º': ['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'],
    '—á': ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'],
    '–¥': ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']
  };

  let word;
  if (amount % 10 === 1 && amount % 100 !== 11) {
    word = units[unit][0];
  } else if ([2, 3, 4].includes(amount % 10) && ![12, 13, 14].includes(amount % 100)) {
    word = units[unit][1];
  } else {
    word = units[unit][2];
  }

  return `${amount} ${word}`;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
bot.hears(/^\/(\d+)(—Å|–º|—á|–¥)\s+(.+)$/, async (ctx) => {
  try {
    await initDB();
    
    const userId = ctx.message.from.id;
    const chatId = ctx.message.chat.id;
    const username = ctx.message.from.username ? `@${ctx.message.from.username}` : escapeMarkdown(ctx.message.from.first_name);
    const amount = parseInt(ctx.match[1]);
    const unit = ctx.match[2];
    const text = ctx.match[3];

    let milliseconds = 0;
    switch (unit) {
      case '—Å': milliseconds = amount * 1000; break;
      case '–º': milliseconds = amount * 60 * 1000; break;
      case '—á': milliseconds = amount * 60 * 60 * 1000; break;
      case '–¥': milliseconds = amount * 24 * 60 * 60 * 1000; break;
    }

    if (milliseconds > 0) {
      const timerId = _.get(db.data, `users.${userId}.lastTimerId`, 0) + 1;
      const timeString = getTimeString(amount, unit);
      const expiresAt = Date.now() + milliseconds;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –≤ –ë–î
      _.set(db.data, `users.${userId}.timers.${timerId}`, {
        text,
        expiresAt,
        chatId,
        unit,
        amount
      });
      _.set(db.data, `users.${userId}.lastTimerId`, timerId);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      db.data.stats.activeTimers++;
      db.data.stats.totalTimers++;
      await db.write();

      await ctx.replyWithMarkdownV2(
        `‚è≥ *${escapeMarkdown(username)}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\\!*\n` +
        `üîπ *–¢–µ–∫—Å—Ç:* ${escapeMarkdown(text)}\n` +
        `‚è±Ô∏è *–°—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑:* ${escapeMarkdown(timeString)}\n` +
        `üÜî *ID —Ç–∞–π–º–µ—Ä–∞:* ${timerId}`
      );

      const timer = setTimeout(async () => {
        try {
          await ctx.telegram.sendMessage(
            chatId,
            `üîî *${escapeMarkdown(username)}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId}\\!*\n` +
            `üìå *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* ${escapeMarkdown(text)}\n` +
            `üéâ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ\\!`,
            { parse_mode: 'MarkdownV2' }
          );

          _.unset(db.data, `users.${userId}.timers.${timerId}`);
          db.data.stats.activeTimers--;
          await db.write();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        }
      }, milliseconds);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º timeout
      _.set(db.data, `users.${userId}.timers.${timerId}.timeout`, timer);
      await db.write();
    } else {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /1—Å, /5–º, /2—á –∏–ª–∏ /3–¥');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞');
  }
});

// ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /—Ç–∞–π–º–µ—Ä—ã, /clear, /stats –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function restoreTimers() {
  try {
    await initDB();
    
    const now = Date.now();
    for (const [userId, userData] of Object.entries(db.data.users)) {
      if (!userData.timers) continue;

      for (const [timerId, timer] of Object.entries(userData.timers)) {
        if (!timer.expiresAt) continue;
        
        const timeLeft = timer.expiresAt - now;
        if (timeLeft > 0) {
          const newTimeout = setTimeout(async () => {
            try {
              await bot.telegram.sendMessage(
                timer.chatId,
                `üîî *–¢–∞–π–º–µ—Ä ‚Ññ${escapeMarkdown(timerId)}\\!*\n` +
                `üìå *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* ${escapeMarkdown(timer.text)}\n` +
                `üéâ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ\\!`,
                { parse_mode: 'MarkdownV2' }
              );

              _.unset(db.data, `users.${userId}.timers.${timerId}`);
              db.data.stats.activeTimers--;
              await db.write();
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞:', error);
            }
          }, timeLeft);

          _.set(db.data, `users.${userId}.timers.${timerId}.timeout`, newTimeout);
        } else {
          _.unset(db.data, `users.${userId}.timers.${timerId}`);
          db.data.stats.activeTimers--;
        }
      }
    }
    await db.write();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–æ–≤:', err);
  }
}

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start((ctx) => {
  const username = ctx.message.from.username ? `@${ctx.message.from.username}` : escapeMarkdown(ctx.message.from.first_name);
  ctx.replyWithMarkdownV2(
    `üï∞Ô∏è *–ü—Ä–∏–≤–µ—Ç, ${escapeMarkdown(username)}\\, –Ø –±–æ—Ç\\-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞\\!*\n\n` +
    `‚ú® *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n` +
    "`/1—Å –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ` \\- —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É\n" +
    "`/5–º –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É` \\- —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n" +
    "`/2—á –ü—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ` \\- —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n" +
    "`/3–¥ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç` \\- —á–µ—Ä–µ–∑ 3 –¥–Ω—è\n\n" +
    "üìã *–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
    "`/—Ç–∞–π–º–µ—Ä—ã` \\- –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã\n" +
    "`/clear 1` \\- —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚Ññ1\n\n" +
    "üìù *–ü—Ä–∏–º–µ—Ä:* `/10–º –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É`"
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
(async () => {
  try {
    await initDB();
    await restoreTimers();
    
    bot.launch()
      .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
      .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));

    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
    process.exit(1);
  }
})();
