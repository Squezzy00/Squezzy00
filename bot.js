const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');
const express = require('express');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const PORT = process.env.PORT || 3000;

// –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const SHIP_TYPES = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]; // –†–∞–∑–º–µ—Ä—ã –∫–æ—Ä–∞–±–ª–µ–π
const BOARD_SIZE = 10;
const LETTERS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
const commands = [
  { command: 'start', description: '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' },
  { command: 'rules', description: '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã' },
  { command: 'playbot', description: '–ò–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º' },
  { command: 'playfriend', description: '–ò–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–æ–º' },
  { command: 'invite', description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞' }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initBot() {
  try {
    await bot.telegram.setMyCommands(commands);
    await initDB();
    console.log('‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
    process.exit(1);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async function initDB() {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        first_name TEXT
      );
    `);
    await client.query(`
      CREATE TABLE IF NOT EXISTS games (
        game_id SERIAL PRIMARY KEY,
        player1_id BIGINT NOT NULL,
        player2_id BIGINT,
        current_player BIGINT,
        player1_field JSONB NOT NULL,
        player2_field JSONB,
        player1_shots JSONB DEFAULT '{}',
        player2_shots JSONB DEFAULT '{}',
        status TEXT DEFAULT 'waiting'
      );
    `);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', err);
    throw err;
  } finally {
    client.release();
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è —Å –∫–æ—Ä–∞–±–ª—è–º–∏
function generateBoard() {
  const board = Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill(0));
  
  for (const size of SHIP_TYPES) {
    let placed = false;
    while (!placed) {
      const vertical = Math.random() > 0.5;
      const x = Math.floor(Math.random() * (vertical ? BOARD_SIZE : BOARD_SIZE - size));
      const y = Math.floor(Math.random() * (vertical ? BOARD_SIZE - size : BOARD_SIZE));
      
      let canPlace = true;
      for (let i = 0; i < size; i++) {
        const nx = vertical ? x : x + i;
        const ny = vertical ? y + i : y;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        for (let dx = -1; dx <= 1; dx++) {
          for (let dy = -1; dy <= 1; dy++) {
            if (board[ny + dy]?.[nx + dx] === 1) {
              canPlace = false;
            }
          }
        }
      }
      
      if (canPlace) {
        for (let i = 0; i < size; i++) {
          if (vertical) {
            board[y + i][x] = 1;
          } else {
            board[y][x + i] = 1;
          }
        }
        placed = true;
      }
    }
  }
  return board;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã
function generateShootingKeyboard(shots = {}) {
  const keyboard = [];
  
  for (let y = 0; y < BOARD_SIZE; y++) {
    const row = [];
    for (let x = 1; x <= BOARD_SIZE; x++) {
      const coord = `${LETTERS[y]}${x}`;
      const emoji = shots[coord] === 'hit' ? 'üí•' : 
                   shots[coord] === 'miss' ? 'üåä' : '‚¨ú';
      row.push(Markup.button.callback(emoji, `shoot_${coord}`));
    }
    keyboard.push(row);
  }
  
  keyboard.push([Markup.button.callback('üè≥Ô∏è –°–¥–∞—Ç—å—Å—è', 'surrender')]);
  return Markup.inlineKeyboard(keyboard);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—è –∏–≥—Ä–æ–∫–∞
function renderBoard(board, shots = {}) {
  let result = '  ' + Array(BOARD_SIZE).fill().map((_, i) => i + 1).join(' ') + '\n';
  
  for (let y = 0; y < BOARD_SIZE; y++) {
    result += LETTERS[y] + ' ';
    for (let x = 0; x < BOARD_SIZE; x++) {
      const coord = `${LETTERS[y]}${x + 1}`;
      if (shots[coord] === 'hit') {
        result += 'üí•';
      } else if (shots[coord] === 'miss') {
        result += 'üåä';
      } else if (board[y][x] === 1) {
        result += 'üö¢';
      } else {
        result += '‚¨ú';
      }
      result += ' ';
    }
    result += '\n';
  }
  
  return `<pre>${result}</pre>`;
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  try {
    await ctx.reply(
      'üö¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–æ—Ä—Å–∫–æ–π –±–æ–π!\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.inlineKeyboard([
        [Markup.button.callback('üìñ –ü—Ä–∞–≤–∏–ª–∞', 'show_rules')],
        [
          Markup.button.callback('ü§ñ –ò–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º', 'play_bot'),
          Markup.button.callback('üë• –ò–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–æ–º', 'play_friend')
        ]
      ])
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ start:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /rules
bot.command('rules', (ctx) => {
  ctx.replyWithMarkdown(
    `*üìñ –ü—Ä–∞–≤–∏–ª–∞ –ú–æ—Ä—Å–∫–æ–≥–æ –±–æ—è:*\n\n` +
    `1. –ò–≥—Ä–∞—é—Ç –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–ª–µ 10√ó10\n` +
    `2. –ö–æ—Ä–∞–±–ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n` +
    `3. –ü–æ –æ—á–µ—Ä–µ–¥–∏ –¥–µ–ª–∞–µ—Ç–µ –≤—ã—Å—Ç—Ä–µ–ª—ã\n` +
    `4. –¶–µ–ª—å - –ø–µ—Ä–≤—ã–º –ø–æ—Ç–æ–ø–∏—Ç—å –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n\n` +
    `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
    `/playbot - –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º\n` +
    `/playfriend - –∏–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º\n` +
    `/invite @user - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞`
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /playbot
bot.command('playbot', async (ctx) => {
  try {
    const playerBoard = generateBoard();
    const botBoard = generateBoard();
    
    const res = await pool.query(
      `INSERT INTO games (player1_id, player2_id, current_player, player1_field, player2_field, status)
       VALUES ($1, 0, $1, $2, $3, 'active')
       RETURNING game_id`,
      [ctx.from.id, playerBoard, botBoard]
    );
    
    await ctx.reply('üéÆ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à —Ö–æ–¥:');
    await ctx.replyWithHTML(renderBoard(playerBoard));
    await ctx.reply('–°—Ç—Ä–µ–ª—è–π—Ç–µ –ø–æ –ø–æ–ª—é:', generateShootingKeyboard());
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ playbot:', err);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤
bot.action(/^shoot_/, async (ctx) => {
  const coord = ctx.match[0].replace('shoot_', '');
  const letter = coord[0];
  const x = parseInt(coord.slice(1)) - 1;
  const y = LETTERS.indexOf(letter);
  
  try {
    const gameRes = await pool.query(
      `SELECT * FROM games 
       WHERE (player1_id = $1 OR player2_id = $1) 
       AND status = 'active' 
       AND current_player = $1`,
      [ctx.from.id]
    );
    
    if (!gameRes.rows.length) {
      return ctx.answerCbQuery('‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥');
    }
    
    const game = gameRes.rows[0];
    const isPlayer1 = game.player1_id === ctx.from.id;
    const opponentField = isPlayer1 ? game.player2_field : game.player1_field;
    const playerShots = isPlayer1 ? game.player1_shots : game.player2_shots;
    
    if (playerShots[coord]) {
      return ctx.answerCbQuery('‚ùå –í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ —Å—é–¥–∞');
    }
    
    const isHit = opponentField[y][x] === 1;
    const newShots = { ...playerShots, [coord]: isHit ? 'hit' : 'miss' };
    
    await pool.query(
      `UPDATE games 
       SET ${isPlayer1 ? 'player1_shots' : 'player2_shots'} = $1,
           current_player = ${isPlayer1 ? 0 : game.player1_id}
       WHERE game_id = $2`,
      [newShots, game.game_id]
    );
    
    await ctx.answerCbQuery(isHit ? 'üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ!' : 'üåä –ú–∏–º–æ!');
    await ctx.editMessageReplyMarkup(generateShootingKeyboard(newShots).reply_markup);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –∏ —Ö–æ–¥ –±–æ—Ç–∞
    if (isPlayer1 && await checkWin(newShots, opponentField)) {
      await endGame(ctx, game.game_id, ctx.from.id);
    } else if (isPlayer1) {
      await botTurn(ctx, game.game_id);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ shoot:', err);
    ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç—Ä–µ–ª–µ');
  }
});

// –•–æ–¥ –±–æ—Ç–∞
async function botTurn(ctx, gameId) {
  const gameRes = await pool.query(
    'SELECT * FROM games WHERE game_id = $1',
    [gameId]
  );
  const game = gameRes.rows[0];
  
  const shots = game.player2_shots || {};
  const field = game.player1_field;
  
  let x, y, coord;
  do {
    x = Math.floor(Math.random() * 10);
    y = Math.floor(Math.random() * 10);
    coord = `${LETTERS[y]}${x + 1}`;
  } while (shots[coord]);
  
  const isHit = field[y][x] === 1;
  const newShots = { ...shots, [coord]: isHit ? 'hit' : 'miss' };
  
  await pool.query(
    `UPDATE games 
     SET player2_shots = $1,
         current_player = $2
     WHERE game_id = $3`,
    [newShots, game.player1_id, gameId]
  );
  
  if (await checkWin(newShots, field)) {
    await endGame(ctx, gameId, 0);
  } else {
    await ctx.telegram.sendMessage(
      game.player1_id,
      `ü§ñ –ë–æ—Ç –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ ${coord} - ${isHit ? 'üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ!' : 'üåä –ú–∏–º–æ!'}\n–í–∞—à —Ö–æ–¥:`,
      generateShootingKeyboard(game.player1_shots)
    );
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
async function checkWin(shots, field) {
  let hits = 0;
  let ships = 0;
  
  for (let y = 0; y < BOARD_SIZE; y++) {
    for (let x = 0; x < BOARD_SIZE; x++) {
      if (field[y][x] === 1) ships++;
      const coord = `${LETTERS[y]}${x + 1}`;
      if (shots[coord] === 'hit') hits++;
    }
  }
  
  return hits === ships;
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
async function endGame(ctx, gameId, winnerId) {
  const gameRes = await pool.query(
    'SELECT * FROM games WHERE game_id = $1',
    [gameId]
  );
  const game = gameRes.rows[0];
  
  await pool.query(
    'UPDATE games SET status = $1 WHERE game_id = $2',
    ['finished', gameId]
  );
  
  if (winnerId === 0) {
    await ctx.telegram.sendMessage(
      game.player1_id,
      'üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª.'
    );
  } else {
    await ctx.telegram.sendMessage(
      winnerId,
      'üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!'
    );
    if (game.player2_id !== 0) {
      await ctx.telegram.sendMessage(
        game.player1_id === winnerId ? game.player2_id : game.player1_id,
        'üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!'
      );
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.use(express.json());
app.use(bot.webhookCallback('/webhook'));

app.get('/', (req, res) => res.send('–ú–æ—Ä—Å–∫–æ–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'));

app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await initBot();
    console.log('ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
  }
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
