const { Telegraf } = require('telegraf');
const express = require('express');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const reminders = new Map();

// 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const cleanDomain = (process.env.RENDER_EXTERNAL_URL || 'squezzy00.onrender.com').replace(/^https?:\/\//, '');
const WEBHOOK_PATH = '/tg-webhook';
const WEBHOOK_URL = `https://${cleanDomain}${WEBHOOK_PATH}`;

// 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
app.get('/', (req, res) => {
  res.send(`
    <h1>Telegram Reminder Bot</h1>
    <p>Status: <span style="color: green;">Active</span></p>
    <p>Webhook: <code>${WEBHOOK_PATH}</code></p>
    <p>–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: <code>/5—Å –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–≤–æ–Ω–∏—Ç—å</code></p>
  `);
});

// 3. –ö–æ–º–∞–Ω–¥–∞ /–≤—Ä–µ–º—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
bot.command('–≤—Ä–µ–º—è', (ctx) => {
  const [_, timeStr, ...messageParts] = ctx.message.text.split(' ');
  const message = messageParts.join(' ');

  const timeMatch = timeStr.match(/^(\d+)([—Å–º—á–¥])$/);
  if (!timeMatch) return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /<—á–∏—Å–ª–æ><—Å|–º|—á|–¥> <—Ç–µ–∫—Å—Ç>\n–ü—Ä–∏–º–µ—Ä: /5—Å –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ');

  const [, amount, unit] = timeMatch;
  const units = { '—Å': 1000, '–º': 60000, '—á': 3600000, '–¥': 86400000 };
  const ms = amount * (units[unit] || 1000);

  if (reminders.has(ctx.from.id)) {
    clearTimeout(reminders.get(ctx.from.id));
  }

  const timer = setTimeout(() => {
    ctx.reply(`@${ctx.from.username}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${message}`);
    reminders.delete(ctx.from.id);
  }, ms);

  reminders.set(ctx.from.id, timer);
  ctx.reply(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${timeStr}: "${message}"`);
});

// 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
app.use(express.json());
app.post(WEBHOOK_PATH, (req, res) => {
  bot.webhookCallback(WEBHOOK_PATH)(req, res)
    .then(() => res.status(200).end())
    .catch(err => {
      console.error('Webhook error:', err);
      res.status(200).end();
    });
});

// 5. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  try {
    await bot.telegram.deleteWebhook();
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:', err.message);
  }
});
