require('dotenv').config();
const { Telegraf } = require('telegraf');
const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync');
const _ = require('lodash');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
const adapter = new FileSync('db.json');
const db = low(adapter);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
db.defaults({
  users: {},
  stats: {
    totalTimers: 0,
    activeTimers: 0
  }
}).write();

const bot = new Telegraf(process.env.BOT_TOKEN);
const OWNER_ID = parseInt(process.env.OWNER_ID);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ ID —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getNextTimerId(userId) {
  const userTimers = db.get(`users.${userId}.timers`).value() || {};
  const ids = Object.keys(userTimers).map(Number);
  return ids.length > 0 ? Math.max(...ids) + 1 : 1;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
function escapeMarkdown(text) {
  if (!text) return '';
  return text.toString()
    .replace(/\_/g, '\\_')
    .replace(/\*/g, '\\*')
    .replace(/\[/g, '\\[')
    .replace(/\]/g, '\\]')
    .replace(/\(/g, '\\(')
    .replace(/\)/g, '\\)')
    .replace(/\~/g, '\\~')
    .replace(/\`/g, '\\`')
    .replace(/\>/g, '\\>')
    .replace(/\#/g, '\\#')
    .replace(/\+/g, '\\+')
    .replace(/\-/g, '\\-')
    .replace(/\=/g, '\\=')
    .replace(/\|/g, '\\|')
    .replace(/\{/g, '\\{')
    .replace(/\}/g, '\\}')
    .replace(/\./g, '\\.')
    .replace(/\!/g, '\\!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function getTimeString(amount, unit) {
  const units = {
    '—Å': ['—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'],
    '–º': ['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'],
    '—á': ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'],
    '–¥': ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']
  };

  let word;
  if (amount % 10 === 1 && amount % 100 !== 11) {
    word = units[unit][0];
  } else if ([2, 3, 4].includes(amount % 10) && ![12, 13, 14].includes(amount % 100)) {
    word = units[unit][1];
  } else {
    word = units[unit][2];
  }

  return `${amount} ${word}`;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
bot.hears(/^\/(\d+)(—Å|–º|—á|–¥)\s+(.+)$/, async (ctx) => {
  const userId = ctx.message.from.id;
  const chatId = ctx.message.chat.id;
  const username = ctx.message.from.username ? `@${ctx.message.from.username}` : escapeMarkdown(ctx.message.from.first_name);
  const amount = parseInt(ctx.match[1]);
  const unit = ctx.match[2];
  const text = ctx.match[3];

  let milliseconds = 0;
  switch (unit) {
    case '—Å': milliseconds = amount * 1000; break;
    case '–º': milliseconds = amount * 60 * 1000; break;
    case '—á': milliseconds = amount * 60 * 60 * 1000; break;
    case '–¥': milliseconds = amount * 24 * 60 * 60 * 1000; break;
  }

  if (milliseconds > 0) {
    const timerId = getNextTimerId(userId);
    const timeString = getTimeString(amount, unit);
    const expiresAt = Date.now() + milliseconds;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –≤ –ë–î
    db.set(`users.${userId}.timers.${timerId}`, {
      text,
      expiresAt,
      chatId,
      unit,
      amount
    }).write();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    db.update('stats.activeTimers', n => n + 1).write();
    db.update('stats.totalTimers', n => n + 1).write();

    await ctx.replyWithMarkdownV2(
      `‚è≥ *${escapeMarkdown(username)}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\\!*\n` +
      `üîπ *–¢–µ–∫—Å—Ç:* ${escapeMarkdown(text)}\n` +
      `‚è±Ô∏è *–°—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑:* ${escapeMarkdown(timeString)}\n` +
      `üÜî *ID —Ç–∞–π–º–µ—Ä–∞:* ${timerId}`
    );

    const timer = setTimeout(async () => {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await ctx.telegram.sendMessage(
          chatId,
          `üîî *${escapeMarkdown(username)}, –¢–∞–π–º–µ—Ä ‚Ññ${timerId}\\!*\n` +
          `üìå *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* ${escapeMarkdown(text)}\n` +
          `üéâ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ\\!`,
          { parse_mode: 'MarkdownV2' }
        );

        // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –ë–î
        db.unset(`users.${userId}.timers.${timerId}`).write();
        db.update('stats.activeTimers', n => n - 1).write();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
      }
    }, milliseconds);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º timeout –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
    db.set(`users.${userId}.timers.${timerId}.timeout`, timer).write();
  } else {
    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /1—Å, /5–º, /2—á –∏–ª–∏ /3–¥');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
bot.command('—Ç–∞–π–º–µ—Ä—ã', async (ctx) => {
  const userId = ctx.message.from.id;
  const username = ctx.message.from.username ? `@${ctx.message.from.username}` : escapeMarkdown(ctx.message.from.first_name);
  const timers = db.get(`users.${userId}.timers`).value();

  if (!timers || Object.keys(timers).length === 0) {
    return ctx.replyWithMarkdownV2(
      `üì≠ *${escapeMarkdown(username)}, —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤\\!*`
    );
  }

  let message = `‚è≥ *${escapeMarkdown(username)}, –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã:*\n\n`;
  const now = Date.now();

  for (const [timerId, timer] of Object.entries(timers)) {
    if (timer.expiresAt) {
      const timeLeft = timer.expiresAt - now;
      if (timeLeft <= 0) continue;
      
      const timeString = getTimeString(timer.amount, timer.unit);
      message += `üîπ *–¢–∞–π–º–µ—Ä ‚Ññ${timerId}*\n` +
                 `üìù *–¢–µ–∫—Å—Ç:* ${escapeMarkdown(timer.text)}\n` +
                 `‚è±Ô∏è *–û—Å—Ç–∞–ª–æ—Å—å:* ${escapeMarkdown(timeString)}\n\n`;
    }
  }

  if (message.endsWith('\n\n')) {
    message = message.slice(0, -2);
  }

  await ctx.replyWithMarkdownV2(message);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
bot.command('clear', async (ctx) => {
  const userId = ctx.message.from.id;
  const username = ctx.message.from.username ? `@${ctx.message.from.username}` : escapeMarkdown(ctx.message.from.first_name);
  const args = ctx.message.text.split(' ');
  
  if (args.length < 2) {
    return ctx.replyWithMarkdownV2(
      `‚ùå *${escapeMarkdown(username)}, —É–∫–∞–∂–∏—Ç–µ ID —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\\!*\n` +
      `üìå *–ü—Ä–∏–º–µ—Ä:* \`/clear 1\``
    );
  }

  const timerId = parseInt(args[1]);
  const userTimers = db.get(`users.${userId}.timers`).value() || {};

  if (!userTimers[timerId]) {
    return ctx.replyWithMarkdownV2(
      `‚ùå *${escapeMarkdown(username)}, —Ç–∞–π–º–µ—Ä ‚Ññ${timerId} –Ω–µ –Ω–∞–π–¥–µ–Ω\\!*\n` +
      `üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/—Ç–∞–π–º–µ—Ä—ã\` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤`
    );
  }

  // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç
  if (userTimers[timerId].timeout) {
    clearTimeout(userTimers[timerId].timeout);
  }

  // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –ë–î
  db.unset(`users.${userId}.timers.${timerId}`).write();
  db.update('stats.activeTimers', n => n - 1).write();

  await ctx.replyWithMarkdownV2(
    `‚úÖ *${escapeMarkdown(username)}, —Ç–∞–π–º–µ—Ä ‚Ññ${timerId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω\\!*\n` +
    `üóëÔ∏è *–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:* ${escapeMarkdown(userTimers[timerId].text)}`
  );
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
bot.command('stats', async (ctx) => {
  if (ctx.message.from.id !== OWNER_ID) {
    return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
  }

  const stats = db.get('stats').value();
  const activeUsers = Object.keys(db.get('users').value() || {}).length;

  await ctx.replyWithMarkdownV2(
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n` +
    `üî¢ *–í—Å–µ–≥–æ —Ç–∞–π–º–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:* ${stats.totalTimers}\n` +
    `‚è≥ *–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤:* ${stats.activeTimers}\n` +
    `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–π–º–µ—Ä–∞–º–∏:* ${activeUsers}`
  );
});

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
function restoreTimers() {
  const users = db.get('users').value() || {};
  const now = Date.now();

  for (const [userId, userData] of Object.entries(users)) {
    if (!userData.timers) continue;

    for (const [timerId, timer] of Object.entries(userData.timers)) {
      if (!timer.expiresAt) continue;
      
      const timeLeft = timer.expiresAt - now;

      if (timeLeft > 0) {
        const newTimeout = setTimeout(async () => {
          try {
            await bot.telegram.sendMessage(
              timer.chatId,
              `üîî *–¢–∞–π–º–µ—Ä ‚Ññ${escapeMarkdown(timerId)}\\!*\n` +
              `üìå *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* ${escapeMarkdown(timer.text)}\n` +
              `üéâ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ\\!`,
              { parse_mode: 'MarkdownV2' }
            );

            db.unset(`users.${userId}.timers.${timerId}`).write();
            db.update('stats.activeTimers', n => n - 1).write();
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞:', error);
          }
        }, timeLeft);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π timeout
        db.set(`users.${userId}.timers.${timerId}.timeout`, newTimeout).write();
      } else {
        db.unset(`users.${userId}.timers.${timerId}`).write();
        db.update('stats.activeTimers', n => n - 1).write();
      }
    }
  }
}

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start((ctx) => {
  const username = ctx.message.from.username ? `@${ctx.message.from.username}` : escapeMarkdown(ctx.message.from.first_name);
  ctx.replyWithMarkdownV2(
    `üï∞Ô∏è *–ü—Ä–∏–≤–µ—Ç, ${escapeMarkdown(username)}\\, –Ø –±–æ—Ç\\-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞\\!*\n\n` +
    `‚ú® *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n` +
    "`/1—Å –ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ` \\- —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É\n" +
    "`/5–º –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É` \\- —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n" +
    "`/2—á –ü—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ` \\- —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n" +
    "`/3–¥ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç` \\- —á–µ—Ä–µ–∑ 3 –¥–Ω—è\n\n" +
    "üìã *–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
    "`/—Ç–∞–π–º–µ—Ä—ã` \\- –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã\n" +
    "`/clear 1` \\- —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚Ññ1\n\n" +
    "üìù *–ü—Ä–∏–º–µ—Ä:* `/10–º –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É`"
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    restoreTimers(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –∏–∑ –ë–î
  })
  .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
