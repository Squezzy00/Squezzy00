require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');

const bot = new Telegraf(process.env.BOT_TOKEN);
let timerCounter = 1;
const activeKeyboards = new Map();
const activeTimers = new Map();

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function parseDateTime(input, ctx) {
    try {
        input = input.trim();
        
        // –§–æ—Ä–º–∞—Ç "DD.MM.YYYY HH:mm"
        if (/^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}$/.test(input)) {
            const [datePart, timePart] = input.split(' ');
            const [day, month, year] = datePart.split('.').map(Number);
            const [hours, minutes] = timePart.split(':').map(Number);
            
            const date = new Date(Date.UTC(year, month - 1, day, hours - 3, minutes));
            if (isNaN(date.getTime())) throw new Error('Invalid date');
            return date;
        }
        // –§–æ—Ä–º–∞—Ç "DD.MM HH:mm"
        else if (/^\d{2}\.\d{2} \d{2}:\d{2}$/.test(input)) {
            const [datePart, timePart] = input.split(' ');
            const [day, month] = datePart.split('.').map(Number);
            const year = new Date().getFullYear();
            const [hours, minutes] = timePart.split(':').map(Number);
            
            const date = new Date(Date.UTC(year, month - 1, day, hours - 3, minutes));
            if (isNaN(date.getTime())) throw new Error('Invalid date');
            return date;
        }
        // –§–æ—Ä–º–∞—Ç "HH:mm"
        else if (/^\d{2}:\d{2}$/.test(input)) {
            const [hours, minutes] = input.split(':').map(Number);
            const now = new Date();
            let date = new Date(Date.UTC(
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate(),
                hours - 3,
                minutes
            ));
            
            if (date <= now) {
                date = new Date(Date.UTC(
                    now.getUTCFullYear(),
                    now.getUTCMonth(),
                    now.getUTCDate() + 1,
                    hours - 3,
                    minutes
                ));
            }
            return date;
        }
        
        throw new Error('Invalid format');
    } catch (e) {
        console.error('Date parsing error:', e);
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"DD.MM.YYYY HH:mm"\n"DD.MM HH:mm"\n"HH:mm"');
        return null;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
function formatDate(date) {
    return date.toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    }).replace(',', '');
}

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start((ctx) => {
    const username = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
    ctx.reply(
        `üï∞Ô∏è –ü—Ä–∏–≤–µ—Ç, ${username}, —è –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞!\n\n` +
        `‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤:\n` +
        `/timer 04.05.2025 22:00 –¢–µ–∫—Å—Ç\n` +
        `/timer 10.05 15:30 –¢–µ–∫—Å—Ç\n` +
        `/timer 18:00 –¢–µ–∫—Å—Ç\n\n` +
        `‚è± –ë—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã:\n` +
        `/5—Å –¢–µ–∫—Å—Ç\n` +
        `/10–º –¢–µ–∫—Å—Ç\n` +
        `/2—á –¢–µ–∫—Å—Ç\n` +
        `/3–¥ –¢–µ–∫—Å—Ç\n\n` +
        `üõ† –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `/see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2\n` +
        `/stop\n` +
        `/cancel ID_—Ç–∞–π–º–µ—Ä–∞`
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /timer
bot.command('timer', (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 2) {
        return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /timer –¥–∞—Ç–∞_–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n–ü—Ä–∏–º–µ—Ä—ã:\n/timer 04.05.2025 22:00 –ü—Ä–∏–≤–µ—Ç\n/timer 10.05 15:30 –û–±–µ–¥\n/timer 18:00 –£–∂–∏–Ω');
    }

    const datetimeStr = args[0] + (args[1].includes(':') ? '' : ' ' + args[1]);
    const text = args.slice(args[1].includes(':') ? 2 : 3).join(' ');
    const datetime = parseDateTime(datetimeStr, ctx);
    
    if (!datetime) return;

    const now = new Date();
    if (datetime <= now) {
        return ctx.reply('‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!');
    }

    const timerId = timerCounter++;
    const timeout = datetime.getTime() - now.getTime();

    const timer = setTimeout(() => {
        ctx.reply(`üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\nüìå ${text}\n‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${formatDate(datetime)}`);
        activeTimers.delete(timerId);
    }, timeout);

    activeTimers.set(timerId, { timer, userId: ctx.from.id, text, datetime });
    ctx.reply(
        `‚è≥ –¢–∞–π–º–µ—Ä ‚Ññ${timerId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n` +
        `üìå ${text}\n` +
        `‚è∞ ${formatDate(datetime)}\n` +
        `üÜî –î–ª—è –æ—Ç–º–µ–Ω—ã: /cancel ${timerId}`
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /cancel
bot.command('cancel', (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    if (!args.length) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–π–º–µ—Ä–∞ (/cancel 123)');

    const timerId = parseInt(args[0]);
    if (!activeTimers.has(timerId)) {
        return ctx.reply('‚ùå –¢–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const timer = activeTimers.get(timerId);
    if (timer.userId !== ctx.from.id) {
        return ctx.reply('‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–∞–π–º–µ—Ä—ã');
    }

    clearTimeout(timer.timer);
    activeTimers.delete(timerId);
    ctx.reply(`‚úÖ –¢–∞–π–º–µ—Ä ‚Ññ${timerId} –æ—Ç–º–µ–Ω–µ–Ω:\n"${timer.text}"`);
});

// –ë—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã (5—Å, 10–º –∏ —Ç.–¥.)
bot.hears(/^\/(\d+)(—Å|–º|—á|–¥)\s+(.+)$/, (ctx) => {
    const amount = parseInt(ctx.match[1]);
    const unit = ctx.match[2];
    const text = ctx.match[3];
    const timerId = timerCounter++;

    let milliseconds = 0;
    switch (unit) {
        case '—Å': milliseconds = amount * 1000; break;
        case '–º': milliseconds = amount * 60 * 1000; break;
        case '—á': milliseconds = amount * 60 * 60 * 1000; break;
        case '–¥': milliseconds = amount * 24 * 60 * 60 * 1000; break;
    }

    const datetime = new Date(Date.now() + milliseconds);
    const timer = setTimeout(() => {
        ctx.reply(`üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\nüìå ${text}`);
        activeTimers.delete(timerId);
    }, milliseconds);

    activeTimers.set(timerId, { timer, userId: ctx.from.id, text, datetime });
    ctx.reply(
        `‚è≥ –¢–∞–π–º–µ—Ä ‚Ññ${timerId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n` +
        `üìå ${text}\n` +
        `‚è± –ß–µ—Ä–µ–∑ ${amount}${unit}\n` +
        `üÜî –î–ª—è –æ—Ç–º–µ–Ω—ã: /cancel ${timerId}`
    );
});

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (/see –∏ /stop)
bot.command('see', (ctx) => {
    const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',');
    if (!buttons.length) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (/see –ö–Ω–æ–ø–∫–∞1, –ö–Ω–æ–ø–∫–∞2)');
    }

    const keyboard = Markup.keyboard(
        buttons.map(btn => [btn.trim()])
    ).resize().selective();

    activeKeyboards.set(ctx.from.id, keyboard);
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
});

bot.command('stop', (ctx) => {
    if (activeKeyboards.has(ctx.from.id)) {
        ctx.reply('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞', Markup.removeKeyboard());
        activeKeyboards.delete(ctx.from.id);
    } else {
        ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', (ctx) => {
    if (ctx.message.text.startsWith('/')) return;
    if (activeKeyboards.has(ctx.from.id)) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞–∂–∞–ª: ${ctx.message.text}`);
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const PORT = process.env.PORT || 3000;
bot.launch({
    webhook: process.env.RENDER ? {
        domain: process.env.WEBHOOK_URL,
        port: PORT
    } : undefined
}).then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
