const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');
const express = require('express');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool();
const activeKeyboards = new Map();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const OWNER_ID = 5005387093;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async function initDB() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS users (
      user_id BIGINT PRIMARY KEY,
      username TEXT,
      nickname TEXT,
      universal_id SERIAL,
      is_premium BOOLEAN DEFAULT FALSE,
      is_banned BOOLEAN DEFAULT FALSE,
      is_admin BOOLEAN DEFAULT FALSE,
      banner_file_id TEXT
    )
  `);
  await pool.query(`
    CREATE TABLE IF NOT EXISTS user_keyboards (
      user_id BIGINT PRIMARY KEY,
      buttons TEXT[] NOT NULL DEFAULT '{}'
    )
  `);
  await pool.query(`
    CREATE TABLE IF NOT EXISTS reminders (
      id SERIAL PRIMARY KEY,
      user_id BIGINT NOT NULL,
      text TEXT NOT NULL,
      end_time BIGINT NOT NULL
    )
  `);
}

// –ö–æ–º–∞–Ω–¥–∞ /set (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
bot.command('set', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  if (!buttons.length) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2');

  try {
    await pool.query(`
      INSERT INTO user_keyboards (user_id, buttons) VALUES ($1, $2)
      ON CONFLICT (user_id) DO UPDATE SET buttons = $2`,
      [ctx.from.id, buttons]
    );
    ctx.reply('‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', Markup.keyboard(buttons).resize());
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /set:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /see (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
bot.command('see', async (ctx) => {
  const buttons = ctx.message.text.split(' ').slice(1).join(' ').split(',').map(b => b.trim());
  if (!buttons.length) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /see –∫–Ω–æ–ø–∫–∞1,–∫–Ω–æ–ø–∫–∞2');

  activeKeyboards.set(ctx.from.id, buttons);
  ctx.reply('‚åõ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', Markup.keyboard(buttons).oneTime());
});

// –ö–æ–º–∞–Ω–¥–∞ /open (–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
bot.command('open', async (ctx) => {
  try {
    if (activeKeyboards.has(ctx.from.id)) {
      const buttons = activeKeyboards.get(ctx.from.id);
      return ctx.reply('–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', Markup.keyboard(buttons).resize());
    }

    const userKb = await pool.query('SELECT buttons FROM user_keyboards WHERE user_id = $1', [ctx.from.id]);
    if (userKb.rows.length) {
      return ctx.reply('–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', Markup.keyboard(userKb.rows[0].buttons).resize());
    }

    ctx.reply('‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /open:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /stop (—É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
bot.command('stop', (ctx) => {
  activeKeyboards.delete(ctx.from.id);
  ctx.reply('üóë –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', Markup.removeKeyboard());
});

// –ö–æ–º–∞–Ω–¥–∞ /timer (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
bot.command('timer', async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 3) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /timer –≤—Ä–µ–º—è(–º–∏–Ω) —Ç–µ–∫—Å—Ç');

  const minutes = parseInt(args[0]);
  if (isNaN(minutes)) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç');

  const text = args.slice(1).join(' ');
  const endTime = Date.now() + minutes * 60000;

  try {
    await pool.query(`
      INSERT INTO reminders (user_id, text, end_time)
      VALUES ($1, $2, $3)`,
      [ctx.from.id, text, Math.floor(endTime / 1000)]
    );
    ctx.reply(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${new Date(endTime).toLocaleTimeString()}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /timer:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
setInterval(async () => {
  try {
    const now = Math.floor(Date.now() / 1000);
    const reminders = await pool.query('SELECT * FROM reminders WHERE end_time <= $1', [now]);
    
    for (const rem of reminders.rows) {
      await bot.telegram.sendMessage(rem.user_id, `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${rem.text}`);
      await pool.query('DELETE FROM reminders WHERE id = $1', [rem.id]);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤:', err);
  }
}, 60000);

// –ö–æ–º–∞–Ω–¥–∞ /setbanner
bot.command('setbanner', async (ctx) => {
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–Ω–µ—Ä–∞
bot.on('photo', async (ctx) => {
  if (ctx.message.reply_to_message?.text === '/setbanner') {
    try {
      const fileId = ctx.message.photo[0].file_id;
      await pool.query('UPDATE users SET banner_file_id = $1 WHERE user_id = $2', [fileId, ctx.from.id]);
      ctx.reply('‚úÖ –ë–∞–Ω–Ω–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞:', err);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /tagall (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
bot.command('tagall', async (ctx) => {
  const user = await pool.query('SELECT is_premium, is_admin FROM users WHERE user_id = $1', [ctx.from.id]);
  const isPrivileged = user.rows[0]?.is_premium || user.rows[0]?.is_admin || ctx.from.id === OWNER_ID;
  if (!isPrivileged) return ctx.reply('üö´ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –∏–ª–∏ –∞–¥–º–∏–Ω');

  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 2) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /tagall N —Å–æ–æ–±—â–µ–Ω–∏–µ');

  const count = Math.min(100, Math.max(1, parseInt(args[0]) || 5));
  const message = args.slice(1).join(' ');

  const users = await pool.query(`
    SELECT username FROM users 
    WHERE username IS NOT NULL 
    AND user_id != ${ctx.from.id}
    AND is_banned = FALSE
    ORDER BY RANDOM() LIMIT $1`,
    [count]
  );

  if (!users.rows.length) return ctx.reply('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–≥–∞');

  const mentions = users.rows.map(u => `@${u.username} ${message}`).join('\n');
  ctx.reply(mentions);
});

// –ó–∞–ø—É—Å–∫
(async () => {
  await initDB();
  
  if (process.env.WEBHOOK_URL) {
    app.use(bot.webhookCallback('/webhook'));
    bot.telegram.setWebhook(process.env.WEBHOOK_URL);
    app.listen(process.env.PORT || 3000, () => console.log('üöÄ –í–µ–±—Ö—É–∫ –∑–∞–ø—É—â–µ–Ω'));
  } else {
    bot.launch().then(() => console.log('ü§ñ Polling –∑–∞–ø—É—â–µ–Ω'));
  }
})();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
